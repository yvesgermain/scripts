$i++
$i+=2
$textInfo = (Get-Culture).TextInfo
$textInfo.ToTitleCase( "my gpolower case string")
for ($i = 1 ; $i -lt 16 ; $i++ ){ ([string] $i).padleft(2,"0")}
get-childitem = dir
select-string = find
$a -replace "is", "IS"
if ((ping -n 1 yvesg|select-string -quiet Reply) -eq $True) {echo Yes}
get-content crete-srv.txt|% {IF ((ping -n 1 $_) -match "Reply") {$_}}
 $a = 3
switch ($a) {
1 {"Its one"}
2 {"Its two"}
3 {"Its three"}
4 {"Its four"}
}
Methods:
get-content ping1.txt | Get-Member -membertype method :This will get the types of methods for an object....
$a = (get-content "first-try.txt")
$a[0].split( )

import-csv jobs.csv |select-object name |sort -property name

This example gets the content from a file (C:\Test1\File1.txt) and divides at the spaces between the words. Then it puts each word on a new line. Then it sorts the resulting list - which by default is alphabetical. Then the whole result is piped to get-unique which filters out the duplicates of each word and displays.

$(foreach ($line in get-content C:\Test1\File1.txt) {$line.tolower().split(" ")}) | sort |get-unique

$(foreach ($line in get-content C:\Test1\File1.txt) {$line.tolower().split("`t")}) Avec le Tab comme charactère spécial.

function Pow($var, $exp) { [Math]::Pow($var, $exp) }
pow 2 5
 "this is a string".ToUpper()
"string".Insert(1,"ABC")
get-childitem c:\scripts\test.txt | Measure-Object length -ave -max -min -sum

import-csv c:\temp\lldns.txt |select-object Name,IP|foreach-object {if (Ping -n 1 -a $_.IP|select-string -quiet "Reply") {write-host $_.name is there} else {write-host  $_.name is not there!}}
Function inbed_group {$a=get-qadobject "$args"; if ($a.type -match "group") {$space + $a.name; $space= $space + "  "; if ($a.members -ne $null){$a.members |% {(inbed_group "$_")}}} else {"$space" + $a.name + "`t" + $a.displayname}}
(new-object system.net.webclient).downloadstring("http://www.microsoft.com")
$a=new-object -com "internetexplorer.application"
$a.Navigate2("www.microsoft.com")
$a.visible=$true
$a = new-object -com "shell.application"
$b = $a.BrowseForFolder(0,"hello",0)
gci *.* | Sort-Object @{Expression={$_.LastWriteTime-$_.CreationTime}; Ascending=$false} | select Name, LastWriteTime, CreationTime
ii servers.xls ;invoke-item
"{0:n0}" -f 100000000  ; result 100,000,000
get-process|select-object name, handlecount |ft -auto

$x={param ([string]$name) "Name=$Name"}
&$x -name "Monad"
$cert=dir cert:\currentuser\my -recurse -codesign
Set-AuthenticodeSignature ie.ps1 $cert -includechain all
write-host first-try.txt -foreground cyan
$b=[string]::join(" ", $a) Join all the lines of $a together and replace the CR-LF with a space
foreach ($i in 1..10) {$i+2}
1..10| % {$_*2}
$a= import-csv c:\temp\lldns.txt |select-object Name,IP|foreach-object {$_.Name}|select-string "LLP"

foreach ($printer in $a) {write-host $printer}
$feed=[xml](new-object system.net.webclient).downloadstring("http://www.sun.com")
$feed.GetElementsByTagName('title')|format-list
foreach ($line in ping -n 1 HOSSQL) {if ($line.Contains("Reply")) {write-host "Yes!"}}
import-csv list.csv |foreach {dsget user $_.dn -display}

But make sure you have a comma-separated list and the first line is a comma-separated  description.
import-csv crete.txt | select-object name|where {$_.name -notmatch ", "}  ; same as: type crete.txt|Find /v ", "

get-content crete-srv.txt| where {ping -n 1 $_|select-string "Reply"}

get-wmiobject Win32_CDROMDrive |select-object  name,caption
get-wmiobject -list : see all the object from WMI
$a = new-object -com "internetexplorer.application" ;$a.navigate2("c:\temp\services.htm") $a.visible=$true

$a = New-Object -type system.media.soundplayer
$a.SoundLocation = "c:\windows\media\ringin.wav"
$a.play()
(new-object system.net.webclient).downloadstring("http://www.microsoft.com")
$a=new-object -com "internetexplorer.application"
$a.Navigate2("www.microsoft.com")
$a.visible=$true
 $a = new-object -com "shell.application"
 $b = $a.BrowseForFolder(0,"hello",0)
gci *.* | Sort-Object @{Expression={$_.LastWriteTime-$_.CreationTime}; Ascending=$false} | select Name, LastWriteTime, CreationTime
ii servers.xls ;invoke-item
"{0:n0}" -f 100000000  ; result 100,000,000
"{0:yyyy_MM_dd_mm_ss}" -f  [datetime]::today.adddays(1)
get-process|select-object name, handlecount |ft -auto

$x={param ([string]$name) "Name=$Name"}
&$x -name "Monad"
$cert=dir cert:\currentuser\my -recurse -codesign
Set-AuthenticodeSignature ie.ps1 $cert -includechain all
"hello there    world!".split(" ",[StringSplitOptions]::RemoveEmptyEntries)
(get-wmiObject Win32_DiskDrive -computername hosexchmb02)|foreach {$_.caption}  Find out if part of a SAN!
1..10|foreach {$_*2}
get-wmiobject -class "Win32_UserAccount" -namespace "root\CIMV2" |select-object Caption "Get ALL users from AD AND Local Machine
get-wmiobject -class "Win32_UserAccount" -namespace "root\CIMV2" -filter "LocalAccount=True"|select-object Caption Get ALL users from Local Machine
get-wmiobject "Win32_Bios"|Select-object Manufacturer
foreach ($share in get-wmiobject "Win32_share" -computername hodygermain) {$share.Name}
(gc ou2.csv)|% {$_.substring($_.IndexOf(","))}  ;Returns the substring that starts at the first comma.
foreach ($c in 0..($b.length-1)) {foreach ($line in import-csv ou2.csv) {$line.($b[$c])}}

foreach ($file in $a) {$line= gc $file; 130..150 | % {if (($line[$_]|select-string -quiet "Virus filter") -eq $true) {$line[$_+10].replace("          <td align=right>","").replace("</td>","")>>test.txt}}}
Get-Process | select Name,ID,@{Name=”Working Set”;Expression={”{0:N2}” -f ($_.Workingset/1000000)}}
import-csv Homedirs.log |% {$_.user.substring(0,$_.user.IndexOf("."))}

$gpm = New-Object -ComObject GPMgmt.GPM
$pc=@{}
(import-csv new1.csv) |% {$pc1[$_.dn] = [int64] $_.lastLogon}
$pc.keys | % {if ($pc0.$_.lastlogon -gt $pc1.$_.lastlogon) {$pcfinal[$_] = $pc0[$_]} else {$pcfinal[$_] = $pc1[$_]}}
$pcfinal[$pcfinal.keys] | % {$_.dn + ";" + [datetime]::fromfiletimeutc($_.lastlogon).ToShortDateString() + " " + [datetime]::fromfiletimeutc($_.lastlogon).TolongtimeString() + "," + [datetime]::fromfiletimeutc($_.pwdlastset).ToShortDateString() + " " + [datetime]::fromfiletimeutc($_.pwdlastset).TolongtimeString()}d:\test\go.csv
While ($i -le ((gc tot.txt).length-1)) {$i++; while ((gc tot.txt)[$i] -notmatch "^//" -and ($i -le ((gc tot.txt).length-1))) {(gc tot.txt)[$i]; $i++}}

GPO stuff  (Log in as Domain admin!)
$gpm = New-Object -ComObject GPMgmt.GPM
$gpm.GetDomain("bur.hydro.qc.ca", "",0).getGPO("{37D57941-28F4-4BB7-8686-EDFC909A7334}")
$gpm.GetDomain("bur.hydro.qc.ca", "",0).GetSOM("").getGPOlinks()  # get Domain linked GPO
$gpm.GetDomain("bur.hydro.qc.ca", "",0).getsom("OU=Serveurs,DC=bur,DC=hydro,DC=qc,DC=ca").GetGPOLinks()    # get GPO's linked to an OU
$gpm.GetDomain("bur.hydro.qc.ca", "",0).GetSOM("OU=Serveurs,DC=bur,DC=hydro,DC=qc,DC=ca").getGPOlinks() |% {" GPO #: " + $_.SOMLinkOrder + " is Enabled= " +  $_.Enabled + " " + ($gpm.GetDomain("bur.hydro.qc.ca", "",0).GetGPO($_.GPOID)).displayname}
$gpm.GetDomain("bur.hydro.qc.ca", "",0).GetSOM("OU=Serveurs,DC=bur,DC=hydro,DC=qc,DC=ca").getGPOlinks() |% {write-host " GPO #: " $_.SOMLinkOrder " is Enabled= " $_.Enabled "`t"  ($gpm.GetDomain("bur.hydro.qc.ca", "",0).GetGPO($_.GPOID)).displayname}

$gpm.GetDomain("bur.hydro.qc.ca", "",0).searchGPOs($gpm.CreatesearchCriteria()) # Get all the GPO's of the Domain... with blank search criteria
$gpm.CreateSearchCriteria().Add($gpm.GetConstants().SearchPropertySOMLinks, $gpm.GetConstants().SearchOpContains, $gpm.getdomain("bur.hydro.qc.ca", "",0).GetGPO("{37D57941-28F4-4BB7-8686-EDFC909A7334}"))


****  Droits sur les GPOs ***********
$gpm = New-Object -ComObject GPMgmt.GPM
$CONSTANTS= $gpm.getconstants()
$newPerms= $gpm.createPermission("group_YG", $CONSTANTS.permGPOEdit, $false)
$gpo=$gpm.GetDomain("tepreprod.hydro.qc.ca", "",0).searchGPOs($gpm.CreatesearchCriteria())

# **************  Pour voir les droits sur une GPO  ***************

$Perms=$gpo | where { $_.displayname -like "GPO de test" } |% {$_.getsecurityinfo()}
$perms |% { $_.trustee}


#*****  Pour ajouter un groupe avec droit d'editer les GPO sur TOUS les GPOs  ******
$gpo |% {$perms= $_.getsecurityinfo() ; $perms.add( $newPerms); $_.setSecurityinfo($perms)}

#********Pour enlever le groupe:  *************
$xperms=$gp.getSecurityInfo()
$xperms.RemoveTrustee("Group_YG")
$gp=$gpo | where { $_.displayname -like "GPO de test" } |% {$_.getsecurityinfo()}
$gp.setSecurityInfo($xperms)

get-qadobject -type organizationalUnit |% {write-host -f yellow $_.dn;(Get-SDMgplink $_.dn) |% {$id=$_.gpoid; Get-SDMgpo * | where {$_.id -like $id} |select displayname }}

([adsi]"").psbase.Children |% {write-host -f yellow $_.distinguishedName;$string=$_.gplink; $a=$string.tostring().split("]["); $a |% {if ($_ -notlike "" -and $_ -notlike " ") {([ADSI]$_.substring(0,86)).displayname } }}

[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites

$a=[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
$a.get_Domains() | % {$_.getalltrustrelationships()}
$root=[adsi]""
$root.psbase.Children
([adsi]"").psbase.Children  ou bien donc : $root.psbase.Children

$a=Get-QADComputer -sizelimit 0| where {$_.operatingSystem -like "*Professional"} |select-object name
$b= $a |% {$_.name}
$b | % {"$_" + "  :  " + [datetime]::fromfiletimeutc((Get-QADComputer $_ -includeallproperties |select-object  lastlogonTimeStamp).lastLogonTimestamp)} | tee lastseen.txt

#**********   SMTP:   **************
$smtp=new-Object System.Net.Mail.SmtpClient("Exchange")
$msg = "Smoke Testing has completed at " + [System.DateTime]::Now.ToString()

$emailMsg = new-Object System.Net.Mail.MailMessage("from@whatever.com", "to@whatever.com", "Smoke Testing Finished", $msg)

$attachment = new-Object System.Net.Mail.Attachment($logFilePath)

$emailMsg.Attachments.Add($attachment)
$smtp.Send($emailMsg)
Write-Host("Email has been sent")

Get-WmiObject win32_diskdrive -computer wlvmom01 -cred "burlab\xj0752" |select-object deviceid, model

deviceid                                                    model
--------                                                    -----
\\.\PHYSICALDRIVE0                                          VMware Virtual disk SCSI Disk Device
\\.\PHYSICALDRIVE1                                          VMware Virtual disk SCSI Disk Device

$ip = [System.Net.IPAddress] '10.10.1.2'
$b = $ip.GetAddressBytes()

$fso= New-Object -com Scripting.FileSystemObject
$fso.GetFolder("d:\scripts")  to get the short folder name and other properties!

for ($i = $a.length - 1; $i -ge 0; $i--) {$b = $b + ($a.substring($i,1))}  ; How to reverse a string

[System.Media.SystemSounds]::Asterisk.play()
[System.Media.SystemSounds]::Hand.play()
[System.Media.SystemSounds]::exclamation.play()
Get-WmiObject -query "Select EightDotThreeFileName, name from Win32_Directory where name= 'c:\\program files'"

#************* Hash tables **************
$a=dir |group -Property extension
Clear-Variable b
$b=@{}
$a |% {$b[$_.name]=$_.count}
$b.GetEnumerator() | Sort-Object Name

[enum]::getnames([system.net.httpstatuscode])
Continue
SwitchingProtocols
Processing
EarlyHints
OK
[int]([system.net.httpstatuscode])::ok
200
**************  Defining an Enum ****************
add-type -TypeDefinition @"
public enum Month
{January,February,March,April,May,June,July,August,September,October,November,December}
"@
[enum]::GetValues([Month])

function inbed_group {$groups = $args ; foreach ($group in $groups) {$space + $group; $members = (get-adgroup -Identity $group -Properties members -ErrorAction SilentlyContinue).members ;if ($members) { $space= $space + "  "; foreach ($member in $members) { $gMembers = get-adobject $member -Properties sAMAccountName ; foreach ($gmember in $gMembers) { if ($gmember.objectclass -notlike "group") { $space + $gmember.name + "`t" + $gmember.SamAccountName} else { inbed_group $gmember.name} } }}}}
Function inbed_group {$a=get-qadobject "$args"; if ($a.type -match "group") {"$space$a"; $space= $space + "  ";if ($a.members -ne $null){$a.members |% {(inbed_group "$_")}}} else {"$space" +  $a.displayname}}

(get-qadgroup "domain admins").members |% {while ((get-qadobject $_).type -like "group") {(get-qadgroup $_).members}} |sort -unique

function inbed_groupCN {if ((get-qadobject "$args").type -match "group") {"$args"; $members =(get-qadgroup "$args").members; if ($members -ne $null) {$members |% {(inbed_groupCN "$_")}}} else {"`t$args"}} # must be use with Canonical Name!

function inbed_group {if ((get-qadobject -name $args[0]).type -match "group") {$args[0]; $space= $space + "  "; (get-qadgroup $args[0]).members |% {(inbed_group $_)}} else {"$space $args"}}

function inbed_group {if ((get-qadobject "$args").type -match "group") {(Get-qadobject "$args").name; $space= $space + "  "; (get-qadgroup "$args").members |% {(inbed_group "$_")}} else {"$space" + (get-qadobject "$args").name + "`t" + (get-qadobject "$args").displayname}}

Function inbed_group {$a=get-qadobject "$args"; if ($a.type -match "group") {$space + $a.name; $space= $space + "  "; if ($a.members -ne $null){$a.members |% {(inbed_group "$_")}}} else {"$space" + $a.name + "`t" + $a.displayname}}

new-object psobject |add-member -pass -mem NoteProperty $h1 $v1 |add-member -pass -mem NoteProperty $h2 $v2

function Member_of {"$space$args";$members =(get-qadgroup "$args").memberof ; if ($members -notlike "") { $space= $space + "  "; $members |% {Member_of $_.substring(3,$_.indexof(",")-3) }}}

*************************************************************
$fichier = read-host "Fichier à ouvrir"

$data = type $fichier |% {$e=@{}; $e.scrap, $e.folder, $e.long, $e.group, $e.right=$_.split(","); $e;}
0..($data.length -1) |% {$data[$_].group=$data[$_].group.replace("`"","").substring(0,$data[$_].group.indexof(".")-1)}
0..($data.length -1) |% {$data[$_].folder=$data[$_].folder.replace("`"","").replace(":","")}

# for ($i=0; $i -le ($data.length -1); $i++) { $data[$i].folder.split("\")|% {$a+= $_ + '\' ; write-host -foreground yellow $a;(get-acl \\laplace\$a).access |where {$_.IdentityReference -match  $data[$i].group}} |select IdentityReference, IsInherited, InheritanceFlags, FileSystemRights| ft -hideTableHeaders -auto -wrap; $a=""}

for ($i=2; $i -lt 84; $i++) {write-host -foreground yellow $data[$i].folder ;
	$parent = (get-acl ("\\laplace\" + $data[$i].folder.substring(0,$data[$i].folder.lastindexof("\")))).access |% {$_.IdentityReference.value};
	   $parent+="AUTORITE NT\SYSTEM","BUR\LCFRSRVD";
	$child  = (get-acl ("\\laplace\" + $data[$i].folder)).access |% {$_.IdentityReference.value};
	0..($child.length-1) |%{if ($parent -contains $child[$_]) {} else {$child[$_]}}
	   $child="" ; $parent="";
}

for ($i=2; $i -lt 84; $i++) {$parent = (get-acl ("\\laplace\" + $data[$i].folder.substring(0,$data[$i].folder.lastindexof("\")))).access |% {$_.IdentityReference.value};
	   $parent+="AUTORITE NT\SYSTEM","BUR\LCFRSRVD";
	$child  = (get-acl ("\\laplace\" + $data[$i].folder)).access |% {$_.IdentityReference.value};
	0..($child.length-1) |%{if ($parent -contains $child[$_]) {} else {$subfolder= $data[$i].folder.split("\");$x=$child[$_];$path="dprh\"
for ($j=1; $j -lt ($subfolder.length-1); $j++) { $path+=$subfolder[$j] + "\"; write-host -foreground yellow "$path"; "$x"}} }
	   $child="" ; $parent=""; $subfolder="";$path="";
}

for ($i=0; $i -lt 84; $i++) {$subfolder= $data[$i].folder.split("\");
	for ($j=1; $j -lt ($subfolder.length-1); $j++){ $path+=$subfolder[$j] + "\";
	$path + "," + $data[$i].group
			     			       }$subfolder="";$path="";
			    }
type dprh2.txt |% {$rep, $grp = $_.split(","); xcacls.vbs dprh\$rep /g $grp /i enable /SPEC A} *******  $grp=bur\*****:x

xcacls.vbs dprh\$rep /r BUR\PARTAGE_VOL-DPRH_CRT_ING-SCI_LAPLACE_ECR /I enable /SPEC A

#*************************************************************************************

dir "\\artere\donnees\partage\permis mail" -recurse |where  {$_.PSIsContainer } | get-acl | % {$_.access |% {if ($_.IsInherited -eq $false) {$_.IdentityReference}}}

$host.ui.RawUI.WindowTitle="Powershell " + $host.Version.Major + "." + $host.Version.Minor + "  compte: XJ0752"
$host.ui.RawUI.BackgroundColor="darkBlue"
[adsi] $user="WinNT://./administrateur,user"
[System.Net.Dns]::GetHostAddresses("www.msn.com")
function whoami {[System.Security.Principal.WindowsIdentity]::GetCurrent().name}
Function ConvertTo-Sid ($NtAccount) {(new-object system.security.principal.NtAccount($NTaccount)).translate([system.security.principal.securityidentifier])}
function ConvertTo-NtAccount ($sid) {(new-object system.security.principal.securityidentifier($sid)).translate([system.security.principal.ntaccount])}
function Convert-BinarySid ($value) {(New-Object System.Security.Principal.SecurityIdentifier($value.objectsid.value,0)).Value}

((New-Object System.DirectoryServices.DirectorySearcher("(&(objectCategory=User)(samAccountName=xj0752))")).FindOne()).Properties.memberof  #active directory searcher for V1
if ((new-object System.IO.FileInfo '\\bur\netlogon\LogonScriptServeur\LogonScript_artere.vbs').exists) {gc \\bur\netlogon\LogonScriptServeur\LogonScript_artere.vbs}
function inbed_group {$a=get-qadobject "$args"; if ($a.type -match "group") {$a.name; $space= $space + "  "; $a.members |% {(inbed_group "$_")}} else {"$space" + $a.name + "`t" + $a.displayname}}
function Member_of {$members =(get-qadobject -name "$args").memberof; if ($members -ne $null) {$members |% {(Member_of $_.substring(3,$_.indexof(",")-3))}} else {$args}}
(dir \\pascal\donnees\partage -filter pt2 |where {$_.mode -eq "d----"}) |% {$folder= $_.fullname.toUpper(); $a=((Get-acl $_.fullname).access |where {$_.IdentityReference -match "partage" -and $_.isinherited -eq $false -and $_.FileSystemRights -match "Modify"} |select IdentityReference); if ($a -ne $null) {write-host -f yellow $folder; $b=(get-qadgroup $a.IdentityReference); $b.name; get-qadgroup $b.name |%{$_.member |% {get-qaduser $_ | select name, displayname, streetaddress}} ;  $b.notes}}
$a=new-object system.io.directoryinfo "d:\"
function get_D { $args |% {$_.getdirectories() |% {if ($_.fullname.length -gt 160) {$_.fullname} ;( get_d $_)}}}

$a=Get-QADGroup PARTAGE_PI-GSM_OHMS_ECR |select info
Set-qadgroup PARTAGE_PI-GSM_OHMS_ECR -ObjectAttributes @{info= "$a" + ' [Ce groupe se retrouve aussi sur \\Reserve\d$\releve]'}

$logs = [System.Diagnostics.EventLog]::GetEventLogs('quasar')
$date = new-object datetime 2008, 02 ,18
$recent=[datetime]::now.adddays(-1)
$logs[0].entries | where {($_.EntryType -eq "Warning" -OR $_.EntryType -eq "Error") -AND ($_.TimeWritten -ge $recent)}

Connect-QADService -service te
$a=get-qadgroup -sizelimit 0 |where {$_.member -match "dc=bur"}
$a |% {if ($_.member -match "dc=bur,") { "xxx$_"te_in_bur.txt; $_.member |% {if ($_ -match "dc=bur,") {$_te_in_bur.txt}}}}


Fichier trop long:

$serveur=Read-host "Donner le nom du serveur à vérifier"
$fso= new-object -com "scripting.filesystemobject"
$root_folder= $fso.GetFolder("\\$serveur\d$\").subfolders |where {$_.path -notmatch "System Volume Information" -and $_.path -notmatch "RECYCLER" -and $_.path -notmatch "RecoveryBin"} | % {$_.path}
function short_folder { $fso.GetFolder($args).subfolders |% {if (($_.path.length - $serveur.length) -ge 251) {write-host -f yellow $_.shortpath; $_.shortpathbig.txt; short_folder $_.shortpath} else {$_.path; short_folder $_.path} }}
$root_folder |% {short_folder $_}

& "C:\Program Files\Log Parser 2.2\LogParser.exe" "select path, name from '\\catenaire\d$\*.*' where attributes like 'D--------' HAVING STRLEN(path) > 247 OR ADD(STRLEN(path), STRLEN(name)) > 259 and Name NOT LIKE '..'" -i:FS -o:nat "-rtp:-1" -e:1

[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Excel) : Pour tuer un objet COM qui à été appellé par script

([adsi]"LDAP://ou=serveurs,dc=bur,dc=hydro,dc=qc,dc=ca").PSBase.get_ObjectSecurity().GetAccessRules($true,$false,[System.Security.Principal.SecurityIdentifier])
([adsi]"LDAP://weadbu01:389/ou=serveurs,dc=ppdbur,dc=hydro,dc=qc,dc=local").PSBase.get_ObjectSecurity().GetAccessRules($true,$false,[System.Security.Principal.ntaccount])

([adsi]"LDAP://ou=serveurs,dc=bur,dc=hydro,dc=qc,dc=ca").PSBase.Get_ObjectSecurity().getSecurityDescriptorSddlForm([System.Security.AccessControl.AccessControlSections]::All)


#*****************************  Trouver tous les objets dans l'AD où le compte "BUR\Ca-seti-serveurs à des droits *******************************************

(get-qadobject -SizeLimit 0) |% {([adsi] "LDAP://$_").PSBase.get_ObjectSecurity().GetAccessRules($true,$false,[system.Security.Principal.ntaccount]) |where {$_.IdentityReference -like "BUR\Ca-seti-serveurs"}}

#******************  Search ad ***************************
 $objADSearcher = new-object DirectoryServices.DirectorySearcher([ADSI]"")
 $objADSearcher.filter = "(&(ObjectClass=User)(samaccountname=xj0752))"
 $objADSearcher.FindAll()

 $objADSearcher = new-object DirectoryServices.DirectorySearcher([ADSI] "LDAP://dc=dev,dc=hydro,dc=qc,dc=ca")
 $objADSearcher.filter = "(&(ObjectClass=User)(cn=malo, martin))"
 $objADSearcher.FindAll()

#****************** Ping ***********************

$ping= new-object System.Net.NetworkInformation.Ping
$ping.send('quasar')

#****************** DNS Query ******************
[System.Net.Dns]::GetHostByName('quasar')
[System.Net.Dns]::GetHostByAddress('10.4.50.13')

#****************** Comment invoquer un script VBS dans Powershell ******************

$scriptControl = New-Object -ComObject ScriptControl
$scriptControl.Language = ‘VBScript’
$scriptControl.AddCode(
    ‘Function ShowMessage(messageToDisplay)
    MsgBox messageToDisplay
    End Function’)
$scriptControl.ExecuteStatement(‘ShowMessage
    “Hello World”’)

#********************* Obtenir la version d'un fichier ************************************
[System.Diagnostics.FileVersionInfo]::GetVersionInfo('\\sps2k3\c$\Program Files\Microsoft SQL Server\MSSQL\binn\sqlservr.exe')

#*********************Show Merlin **********************************
$agent = new-object -com Agent.Control.2
$agent.Connected = 1
$agent.Characters.Load("Merlin")
$merlin = $agent.Characters.Character("Merlin")
$merlin.Show()
#********* Spell checking with Word *********************
$oWord=new-object -COM Word.Application
$oWord.Documents.Add()
$oWord.CheckSpelling("Check my speelling")
$oWord.GetSpellingSuggestions("speelling")
$oWord.GetSpellingSuggestions("speelling") |% {$_.name}

#***************  Variants ********************
My observation is that PS variables work very well as variants when used with
COM interfaces. They just need to be provided as [ref]
Example:

C:>$ot = new-object -com catvbcom.vbtool
C:>$name = 'everyone'
C:>$ot.sidstringfromname([ref]$name)
S-1-1-0
C:>
#*************** Quota avec Windows 2003 R2 *******************

http://itbloggen.se/cs/blogs/bjrn_stermans_blog/archive/2007/07/18/536.aspx

$qm = New-Object -com "srmsvc.srmquotamanager"
$quota = $qm.CreateQuota("C:\TestQuota")
$quota.QuotaLimit = 200mb
$quota.Commit()
#************************ Built-in properties in excel  *********************************
$excel = New-Object -ComObject Excel.Application
$excel.Visible = $false
$workbook = $excel.Workbooks.Open("C:\test\excel.xls")
$binding = "System.Reflection.BindingFlags" -as [type]
Foreach($property in $workbook.BuiltInDocumentProperties)
{
  $pn = [System.__ComObject].invokemember("name",$binding::GetProperty,$null,$property,$null)
  trap [system.exception]
   {
     write-host -foreground blue "Value not found for $pn"
    continue
   }
  "$pn`: " +
   [System.__ComObject].invokemember("value",$binding::GetProperty,$null,$property,$null)
 }
$excel.quit()

gc good.txt |% {$pc=$_; $a= dir \\$pc\c$\"documents and settings" -name -exclude "all users" ; $a |% {if ((new-object System.IO.DirectoryInfo \\$pc\c$\"documents and settings"\$_\"Local Settings\Temporary Internet Files").exists) {"\\$pc\c:\documents and settings\$_ "; dir \\$pc\c$\"documents and settings"\$_\"Local Settings\Temporary Internet Files"\*.* -exclude index.dat |del -recurse -force}}}

#***************  How to delete a remote event log a computer ****************

[System.Diagnostics.EventLog]::Delete("DNS Server", "dl380_01")

dir .qmail-* | % {[array] $a =GC $_ |% {if ($_ -notlike "") {$_.substring(0,1) + $_.substring($_.IndexOf(".")+1)}} ; if
($_.name.replace(".qmail-","") -notlike $a) {write-host -f yellow $_.name.replace(".qmail-",""); $a}}

#**************** Trouver tous les OU, mettre en ordre, et trouver les GPOs *********************************
[array] $a= (get-qadobject "dc=omhm,dc=corp")
$a= $a+ (get-qadobject -type OrganizationalUnit)
$d=$a |% {$c=""; $b=$_.dn.split(","); for ($i=$b.length-1; $i -ge 0; $i--) {$c= $c+ $b[$i] + ","; }$c.substring(0,$c.length-1) }
$e=$d |sort
$c=$e |% {$c=""; $d=$_.split(","); for ($i=$d.length-1; $i -ge 0; $i--) {$c= $c+ $d[$i] + ","; } $c.substring(0,$_.length)}
$c |% {[ADSI]"LDAP://$_" |% {write-host -f yellow $_.distinguishedName;$string=$_.gplink; $a=$string.tostring().split("]["); $a |% {if ($_ -notlike "" -and $_ -notlike " ") {([ADSI]$_.substring(0,86)).displayname } }}}

#*******************  Trouver tout l'espace utilisé sur les disques des serveurs  ************************************
$a=Get-QADComputer |where {$_.osname -like "*serve*"}
$b=$a |% {if (ping -n 1 $_.name |select-string "Réponse") {$_.name}}
$b |% {write-host -f Yellow $_; gwmi -comp $_ Win32_LogicalDisk  | where  {$_.drivetype -like "3"} | % { $used=[int64] ($_.size -[int64] $_.freespace)/1000000000 ;[int64] $d= [int64] $d+ $used ;$_.deviceid + "`t " + $used }}
"Total: $d gigs"
#********************** MAPI et Outlook 2007 ************************************
$info = New-Object -ComObject Outlook.Application
$objNamespace = $info.GetNamespace("MAPI")
$objNamespace.Stores | where {$_.ExchangeStoreType -like "3"} |select Displayname, filepath |ft -auto

#*******************   WSUS    ********************************
[void][reflection.assembly]::LoadWithPartialName("Microsoft.UpdateServices.Administration")
$wsus= new-object "Microsoft.UpdateServices.Administration.AdminProxy"
$poly=$wsus.GetRemoteUpdateServerInstance("srv-poly01",$false,8530)
$ml350g5=$wsus.GetRemoteUpdateServerInstance("ml350g5-01",$false,8530)
$dc2=$wsus.GetRemoteUpdateServerInstance("dc2",$false,80)
($poly.GetComputerTargetGroup(($poly.GetComputerTargetGroups() |where {$_.name -like "XP test"} |% {$_.id.tostring()})).getcomputertargets() |% {$_.fulldomainname}) +
($dc2.GetComputerTargetGroup(($dc2.GetComputerTargetGroups() |where {$_.name -like "XP test"} |% {$_.id.tostring()})).getcomputertargets() |% {$_.fulldomainname} ) +
($ml350g5.GetComputerTargetGroup(($ml350g5.GetComputerTargetGroups() |where {$_.name -like "XP test"} |% {$_.id.tostring()})).getcomputertargets() |% {$_.fulldomainname})

#***************  how to add a computer to a Wsus group called XP test  ****************************
$poly.GetComputerTargetGroups()
$test=$poly.GetComputerTargetGroup("c1820489-0b89-4bca-b541-c01e4f195c9f")
$test.AddComputerTarget( $poly.GetComputerTargetbyname("pc454.omhm.corp"))

$b= gci \\ml350g5-03\LOGICIELS\GENERALE\Outlook2007\Office12Logs |% {$_.name.replace(".txt","")}
$a=get-qadcomputer | where {$_.osname -like "Windows XP*" -and $_.OSServicePack -like "Service Pack 3" -and $_.dn -notlike "*poste_desactive,dc=omhm,dc=corp"} | % {$_.name}
$c= $a |% {if(!($_ |select-string $b)) {$_}}
$c |% {if (ping -n 1 $_ |select-string "Réponse") {psexec \\$_ -u omhm1\admin -p Lvg_96_rd cmd /c \\ml350g5-03\logiciels\GENERALE\Office_2007\CacheOffice.bat}}

$c=dnscmd 192.168.1.6 /enumrecords 30.168.192.in-addr.arpa `@
$a=$c |% {$pc=$_.split("`t"); $pc[($pc.length-1)] }
$b=$a |select-string "^P"
$a=$b |%{$_.tostring()}
$a |% {$_.replace(".omhm.corp.","")}
$b=$a |% {$_.replace(".omhm.corp.","")}
$ok=$b  |% {if (ping -n 1 $_ |select-string "192.168.30.") {$_} }
$a=[datetime]::now
for ($i=0; $i -lt $ok.length; $i++) {$a=[datetime]::now.addminutes($i+2).ToLongTimeString(); schtasks /create /s $ok[$i] /u omhm1\admin /p Lvg_96_rd /sc once /tn CacheOutlook /TR \\ml350g5-03\logiciels\GENERALE\Office_2007\CacheOffice.bat /st $a}

$b= gci \\ml350g5-03\LOGICIELS\GENERALE\Outlook2007\Office12Logs |% {$_.name.replace(".txt","")}
$a=get-qadcomputer | where {$_.osname -like "Windows XP*" -and $_.OSServicePack -like "Service Pack 3" -and $_.dn -notlike "*poste_desactive,dc=omhm,dc=corp"} | % {$_.name}
$c= $a |% {if(!($_ |select-string $b)) {$_}}
$ok=$c |% {ping -n 1 $_ |select-string "Réponse de 192.168."}
$ok2=$ok |% {$_.tostring()}
$ok=$ok2|% {$_.substring($_.indexof("192.168."),$_.lastindexof(":")-12).trim()}
$ok |% {$_; switch ($_.substring(8,($_.lastindexof('.')-8)))
{
"4"  {$deploy="ml110g2-05-old"; break};
"30" {$deploy="ml350g5-02"; break}
"95" {$deploy="ml350g5-02"; break}
"97" {$deploy="ml350g5-02"; break}
"50" {$deploy="ml350g5-01"; break}
"60" {$deploy="ml110g2-04"; break}
"70" {$deploy="ml330_02"; break}
$_   {$deploy="ml350g5-03"; break}
}
$a=[datetime]::now
$a=$a.addminutes(2);
schtasks /create /s $_ /u omhm1\admin /p Lvg_96_rd /sc once /tn CacheOutlook /TR \\$deploy\logiciels\GENERALE\Office_2007\CacheOffice.bat /st $a.tolongtimestring() }

#**************  Automatic Updates  ********************

$AUSettings = New-Object -com "Microsoft.Update.AutoUpdate"
$updateSession = new-object -com "Microsoft.Update.Session"
$Criteria="IsInstalled=0 and Type='Software'"
$updates=$updateSession.CreateupdateSearcher().Search($criteria).Updates

#*************** Patches *************************
$b= gci \\ml350g5-03\LOGICIELS\GENERALE\Outlook2007\Office12Logs\patches |% {$_.name.replace(".txt","")}
$a=get-qadcomputer | where {$_.osname -like "Windows XP*" -and $_.OSServicePack -like "Service Pack 3" -and $_.dn -notlike "*poste_desactive,dc=omhm,dc=corp"} | % {$_.name}
$c= $a |% {if(!($_ |select-string $b)) {$_}}
$ok=$c |% {ping -n 1 $_ |select-string "Réponse de 192.168."}
$ok2=$ok |% {$_.tostring()}
$ok=$ok2|% {$_.substring($_.indexof("192.168."),$_.lastindexof(":")-12).trim()}
$a=[datetime]::now
$ok |% {$_; switch ($_.substring(8,($_.lastindexof('.')-8)))
{
"4"  {$deploy="ml110g2-05-old"; break};
"30" {$deploy="ml350g5-02"; break}
"95" {$deploy="ml350g5-02"; break}
"97" {$deploy="ml350g5-02"; break}
"50" {$deploy="ml350g5-01"; break}
"60" {$deploy="ml110g2-04"; break}
"70" {$deploy="ml330_02"; break}
$_   {$deploy="ml350g5-03"; break}
}
$a=$a.addminutes(2);
schtasks /create /s $_ /u omhm1\admin /p Lvg_96_rd /sc once /tn CacheOutlook /TR \\pc454\c$\scripts\go.bat /st $a.tolongtimestring() }
#****************** Show desktop ****************************
 $objShell =New-Object -com "Shell.Application"
 $objShell.ToggleDesktop()
 $ObjShell.UndoMinimizeALL()

#*************  Pour voir qui a une session ouverte sur la console d'un poste  ************************
gwmi win32_computersystem -comp PC618 |select username

get-user  |where {($_.WindowsEmailAddress |select-string $good) -and $_.RecipientType -like "user"}
#****************  Pour garder toute l'historique des sessions  ****************************
Start-Transcript m:\powershell\MySession.txt -Append

#***************  Outlook RULES *********************
$info = New-Object -ComObject Outlook.Application
$objNamespace = $info.GetNamespace("MAPI")
$objNamespace.Folders | where { $_.name -like "Dossiers personnels*"} | % {$_.store.GetRules() |% {$_.name}}


$est |% {$b=dir -name \\ml350g5-03\pst\omhm1\$_* ; $a=$b.split("-."); $c=("\\" + $a[1] + "\c$\Documents and Settings\" + $a[0] + "\Local Settings\Application Data\Microsoft\Outlook\Outlook.pst"); if ((new-object System.IO.FileInfo $C).exists) {copy $c d:\pst\a_faire\$b} }

$a=get-transportrule  | where {$_.state -notlike "disabled"} |% {$_.name.replace("C-","")}
$b=$a |% {dir -name \\srv-backup\pst\$_*}

$b |% {$C=$_.SPLIT(".-"); $NOM=$c[0]; $pc=$c[1]; $read=gc \\ml350g5-03\pst\omhm1\$_; $read | select-string "Dossier Personnel"; $dp=$read | % {$_ |select-string "Dossiers personnels"} ; $path=$dp.tostring().substring($dp.tostring().indexof(":")+1) ; if ($path -notlike "" ) {"copy `"" + "\\$pc" + '\c$\' + $path + "`" " + "d:\pst\a_faire\$nom-$pc.pst" goall.txt; remove-variable nom, read, pc, c,dp, path; }}

get-messagetrackinglog -Recipients:valerie.rheme@omhm.qc.ca -Server "exchange" -EventID "RECEIVE" -Start "2009-07-20 09:58:00" -End "2009-07-27 10:08:00" |select messageid
Get-Mailbox scloutie | Add-MailboxPermission -User corp\adm1nyg -AccessRights FullAccess -InheritanceType all
get-mailbox scloutie | Export-Mailbox -SenderKeywords "Lynn@downtownchathamcentre.com" -StartDate [datetime]::today -DeleteContent
#******************  Déléguer les droits pour gérer les listes de distribution   *****************************************

Add-ADPermission -Identity "Marketing Department" -User "John Smith" -AccessRights WriteProperty -Properties "Member"

#******************************  Utilisation d'un Web service  ************************
$weather = New-WebServiceProxy -uri http://www.webservicex.com/globalweather.asmx?WSDL
([xml]$weather.GetWeather('Zurich-Kloten','Switzerland')).CurrentWeather
([xml]$weather.GetWeather('Montreal','Canada')).CurrentWeather
(Invoke-WebRequest "http://wttr.in/montreal?0" -UserAgent curl).content
#***************************  So can you use PowerShell to add a folder to your Windows Path?   *********************
Sure; here’s a command (that we won’t bother to explain in this introductory article) that tacks the folder C:\Scripts onto the end of your Windows path:

$env:path = $env:path + ";c:\scripts"

#************************  if you want to run a Windows PowerShell script as part of a logon script. **************************
You can’t simply assign a .PS1 file as a logon script; the operating system won’t know what to do with that.
Instead, you’ll need to create a VBScript script that calls the PowerShell script:

Set objShell = CreateObject("Wscript.Shell")
objShell.Run("powershell.exe –noexit c:\scripts\test.ps1")

get-qadgroupmember -Identity exchange-inbox |% {$nom=$_.name; Get-mailboxfolderstatistics $_.name | where {$_.foldertype -like "Inbox"  -and $_.name -like "Inbox"} | % {Get-mailboxstatistics $nom | where {$_.LastLogonTime -gt [datetime]::now.adddays(-3) }| select displayname, last*}}

#***********************  Standby Continuous Replication script  **************************

Restore-StorageGroupCopy Primary\sg1 -StandbyMachine standby1 -Force:$true -Confirm:$False
stop-service msExchangeRepl
start-service msExchangeRepl
Move-StorageGroupPath Standby1\sg1dbport -SystemFolderPath c:\sg1 -LogFolderPath c:\sg1 -Confirm:$false -ConfigurationOnly
Move-DatabasePath standby1\mbx1port -EdbFilePath c:\sg1\mbx1.edb -Confirm:$false -ConfigurationOnly -force
Set-mailboxdatabase standby1\sg1dbport\mbx1port -allowFileRestore:$true -confirm:$false
copy c:\sg1\e0000000001.log c:\sg1\e00tmp.log
mount-database standby1\sg1dbport\mbx1port -confirm:$false
get-mailbox -database Primary\sg1\mbx1 | where {$_.objectclass -notmatch '(SystemAttendantMailbox|ExOleDBSytemMailbox)'} | Move-Mailbox -configurationOnly -TargetDatabase Standby1\sg1dbport\mbx1port

#****************  EWS ***************************
'First you need to load the DLL
$dllpath = "C:\Program Files\Microsoft\Exchange\Web Services\1.0\Microsoft.Exchange.WebServices.dll"
[void][Reflection.Assembly]::LoadFile($dllpath)

'Now you can create a ExchangeService object if your going to be coding against 2007 you must explictly set the version.

$service = new-object Microsoft.Exchange.WebServices.Data.ExchangeService([Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2007_SP1)
$service.AutodiscoverUrl("yves.germain@omhm.qc.ca")

$uri=[system.URI] "https://exchange/ews/exchange.asmx"
$service.Url = $uri
$inbox = [Microsoft.Exchange.WebServices.Data.Folder]::Bind($service, [Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::Inbox)
"Number or Unread Messages : " + $inbox.UnreadCount
$view = New-Object Microsoft.Exchange.WebServices.Data.ItemView(1)
$findResults = $service.FindItems([Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::Inbox,$view)
""
"Last Mail From : " + $findResults.Items[0].From.Name
"Subject : " + $findResults.Items[0].Subject
"Sent : " + $findResults.Items[0].DateTimeSent

#************************  Pour enlever les adresses Courriels de type Exchange.OMHM.corp   ********************************
get-mailbox  |% {$email=$_.emailaddresses; $email | % {if ($_.SmtpAddress -notlike "*exchange.omhm.corp") {[array] $email2 += $_.SmtpAddress}  }  ; set-mailbox -iden $_ -EmailAddresses $email2 ; Remove-Variable email* }
#***********************  Speed up PowerShell Bootup  *****************************************
Set-Alias ngen @(
dir (join-path ${env:\windir} "Microsoft.NET\Framework") ngen.exe -recurse |
sort -descending lastwritetime
)[0].fullName
[appdomain]::currentdomain.getassemblies() | %{ngen $_.location}
#***********************   Flush repeating lines  ********************************
$a |% {$item+=1; if ($a[$item-1] -like $tobe) {$a[$item-1] = $null } else {$tobe = $_} }; Remove-Variable item
#********************* adding and removing things from arrays  ***************************
$a = New-Object System.Collections.ArrayList
$a.Add("red")
$a.Add("yellow")
$a.remove("red")
#******************************  sTART eXCEL *********************************************
$Excel = New-Object -comobject Excel.Application

$Excel.Visible = $True

$Workbook = $Excel.Workbooks.Add()
$Worksheet = $Workbook.Worksheets.Item(1)

$Worksheet.Cells.Item(1,1) = "A value in cell A1."

$Excel.Quit()
#*****************************
$a = gc classeur2.txt |% {$e=@{}; $e.path, $e.user, $e.rights = $_.split("`t"); $e}
$a |% {$item+=1; if ($a[$item-1].path -like $tobe) {$a[$item-1].path = $null } else {$tobe = $_.path} }; Remove-Variable item
$Excel = New-Object -comobject Excel.Application
$Excel.Visible = $True
$Workbook = $Excel.Workbooks.Add()
$Worksheet = $Workbook.Worksheets.Item(1)
$x=0; $y=1; 0..($a.length-1) |% { if ($a[$_].path -notlike "") {$y=1; $x+=1;  $worksheet.Cells.item($x,$y)= $a[$_].path;$y+=1 ; $worksheet.Cells.item($x,$y)= $a[$_].user; $y+=1; $worksheet.Cells.item($x,$y)= $a[$_].rights} else {$y+=1 ; $worksheet.Cells.item($x,$y)= $a[$_].user; $y+=1; $worksheet.Cells.item($x,$y)= $a[$_].rights} }
#***************************************  find certificate server in Domain  ***************************************
Invoke-Expression "$Env:SystemRoot\System32\certutil.exe"
#*********************************  Glee Graph  ***********************************
function New-GleeViewer
{
    Param(
    [Drawing.Size]$size = $(New-Object Drawing.Size @(600,600))
    )
    [void] [Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
    [void] [Reflection.Assembly]::LoadFrom("C:\Program Files (x86)\Microsoft Research\GLEE\samples\WindowsApplication\WindowsApplication\bin\Debug\Microsoft.GLEE.GraphViewerGDI.dll")
    [void] [Reflection.Assembly]::LoadFrom("C:\Program Files (x86)\Microsoft Research\GLEE\samples\WindowsApplication\WindowsApplication\bin\Debug\Microsoft.GLEE.Drawing.dll")
    [void] [Reflection.Assembly]::LoadFrom("C:\Program Files (x86)\Microsoft Research\GLEE\samples\WindowsApplication\WindowsApplication\bin\Debug\Microsoft.GLEE.dll")

    $form = New-Object Windows.Forms.Form
    $form.Size = $size

    $viewer = New-Object Microsoft.Glee.GraphViewerGdi.GViewer
    $viewer.Dock = "Fill"
    $form.Controls.Add($viewer)
    $form.Add_Shown( { $form.Activate() } )
    return $form
}

function New-GleeGraph()
{
    $g = New-Object Microsoft.Glee.Drawing.Graph("graph");
    return $g
}

function Show-GleeGraph
{
    param(
    [Windows.Forms.Form]$viewer,
    [Microsoft.Glee.Drawing.Graph]$Graph
    )
    $viewer.Controls[0].Graph = $graph
    $result = $viewer.ShowDialog()
    $viewer.Controls[0].Graph = $null
}


$viewer = New-GleeViewer
$g1 = New-GleeGraph
$for=[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
$for.Domains |% {$_.getalltrustrelationships() | where {$_.TrustType -like "External"} |% {[void] $g1.AddEdge($_.SourceName.tolower().replace(".loto-quebec.com","").replace(".com",""), $_.TargetName.ToLower().replace(".loto-quebec.com","").replace(".com",""))}}
Show-GleeGraph $viewer $g1
$g2 = New-GleeGraph
$for.Domains |% {$_.getalltrustrelationships() | where {$_.TrustType -like "CrossLink"} |% {[void] $g2.AddEdge($_.SourceName.tolower().replace(".loto-quebec.com","").replace(".com",""), $_.TargetName.ToLower().replace(".loto-quebec.com","").replace(".com",""))}}
Show-GleeGraph $viewer $g2
$g3 = New-GleeGraph
$for.Domains |% {$_.getalltrustrelationships() | where {$_.TrustType -like "ParentChild"} |% {[void] $g3.AddEdge($_.SourceName.tolower().replace(".loto-quebec.com","").replace(".com",""), $_.TargetName.ToLower().replace(".loto-quebec.com","").replace(".com",""))}}
Show-GleeGraph $viewer $g3

#********************************  Charactère Ascii ********************************
[int][char]'`'    96
[char] [int] 65   A
#********************************  Exchange 12 Rocks! ******************************
"FYDIBOHF23SPDLT" |% { $a=$_.ToCharArray(); $a |% {[char] ([int] $_ - 1)}}
#********************************  Find all command with a snapin  *****************
Get-PSSnapin | select name
get-command -Module  SDMSoftware.PowerShell.GPMC
#********************************  Visio Automation ********************************
Import-module d:\Visio\VisioAutomation_2_DEV\VisioAutomation\VisioPS\bin\Debug\visiops.dll
#********************************
#--- Définir les informations culturelles du thread actif sur l'anglais avant d'instancier Excel
[threading.thread]::CurrentThread.CurrentCulture = [System.Globalization.CultureInfo]::CreateSpecificCulture("en-US")

$a="admin\.","\(Nter\)","\(Consultant\)"
$Excel = New-Object -comobject Excel.Application
$Excel.Visible = $True
$Workbook = $Excel.Workbooks.Add()
$Worksheet = $Workbook.Worksheets.Item(1)
$Worksheet.Cells.Item(1,1) = "Name";
$Worksheet.Cells.Item(1,2) = "Shape Number";
$Worksheet.Cells.Item(1,3) = "Phone number";
$Worksheet.Cells.Item(1,4) = "Department";
$Worksheet.Cells.Item(1,5) = "Hide Shape Number";
$x=2; $y=1; get-qaduser | where {$_.name |select-string $a} | % {$Worksheet.Cells.Item($x,$y) = $_.name;$y++; $Worksheet.Cells.Item($x,$y) = $_.office; $y++; $Worksheet.Cells.Item($x,$y) =$_.phoneNumber; $y++; $Worksheet.Cells.Item($x,$y) =$_.Department; $x++; $y=1}

get-qaduser | where {$_.name |select-string $a} | % { $_.name -replace("\(nter\)","") -replace("\(Consultant\)","") }
#************************************  Printer stuff  *******.dll
$oPrinter = new-object -com "Printer.Printer.1"
$oMaster  = New-Object -com "PrintMaster.PrintMaster.1"
$print= $oMaster.Printers("\\ntersys09")
$b="archimède","platon","Thalès","Euripide","Euclide","Hérodote"
$b | % {$name= $_; $print | where {$_.Printername -like "\\ntersys09*\" + $name} | select shareName, comment, location}
#************************  Message Bloc  ******************************
[System.Windows.Forms.MessageBox]::Show('You must connect to one or more hosts before you can manage the hosts themselves. Please click on the ''Managed Hosts'' node, connect to one or more of the servers you have configured there, and then try again.','Connection not established',[System.Windows.Forms.MessageBoxButtons]::OK,[System.Windows.Forms.MessageBoxIcon]::Information) | Out-Null

#*************************************  Change your prompt  *****************************
function prompt{    Write-Host ("PS " + $(get-location) +">") -nonewline -foregroundcolor Yellow ;  return " "}

********************************  Speak  ************************************************
[System.Reflection.Assembly]::LoadWithPartialName("System.Speech") | out-null
$spk = New-Object system.Speech.Synthesis.SpeechSynthesizer
$spk.Speak("Hello world")
******************  wpf  **********************
Add-Type -assemblyName PresentationFramework
Add-Type -assemblyName PresentationCore
Add-Type -assemblyName WindowsBase
$window = New-Object Windows.Window
$window.Title = "Hello World"
$label = New-Object Windows.Controls.Label
$label.Content, $label.FontSize = "Hello World", 24
$window.Content = $label
$window.SizeToContent = "WidthAndHeight"
$null = $window.ShowDialog()

********************  ENUMERATION  *********************
$enum = "
namespace myspace
{
public enum fruit
{
apple = 29, pear = 30, kiwi = 31
}
}
"
Add-Type -TypeDefinition $enum -Language CSharpVersion3

[myspace.fruit]
[myspace.fruit]::pear
[myspace.fruit]::pear.value__


[system.enum]::getnames([System.Security.AccessControl.FileSystemRights])
[system.Enum]::GetValues([system.dayofweek])
[system.Enum]::GetValues([system.Environment+SpecialFolder])
[System.Enum]::GetValues("System.Management.Automation.PSMemberTypes")
[enum]::GetValues([System.DirectoryServices.ActiveDirectory.ForestMode])
[enum]::getValues(“System.Management.Automation.Provider.ProviderCapabilities")
[Enum]::GetValues("System.IO.FileAttributes")
[Environment]::GetFolderPath
[Datetime]::IsLeapYear(2008)

powershell -sta
Add-Type –a system.windows.forms
env:appdata | % { [windows.forms.clipboard]::SetText($input) }

0..11 |% { [Globalization.DatetimeFormatInfo]::CurrentInfo.MonthNames[$_] }
Loading assembly from dll
PS > [Reflection.Assembly]::LoadFrom("$pwd\LoadMe.dll")

Loading assembly from GAC
PS > [System.Reflection.Assembly]::LoadWithPartialName("System.Data")

Check file version

[System.Diagnostics.FileVersionInfo]::GetVersionInfo("$pshome\powershell.exe")

Read and Write File Bytes

PS > $FileBytes = [System.IO.File]::ReadAllBytes("$env:SystemLocation\twain.dll")

PS > [System.IO.File]::WriteAllBytes("$pwd\twain.dll",$FileBytes)

Read Text from the file [ as a string , not as array of objects .i.e., Get-Content )

PS> [System.IO.File]::ReadAllText("Web.Config")
PowerShell Choice (Yes/No) - User Input
$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes",""
$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No",""
$choices = [System.Management.Automation.Host.ChoiceDescription[]]($yes,$no)
$caption = "Warning!"
$message = "Do you want to proceed"
$result = $Host.UI.PromptForChoice($caption,$message,$choices,0)
if($result -eq 0) { Write-Host "You answered YES" }
if($result -eq 1) { Write-Host "You answered NO" }

******************Wake up on LAN **********************

gwmi Win32_NetworkAdapter -filter "AdapterTypeId=0" | % {

$strNetworkAdapterID=$_.PNPDeviceID.ToUpper()

gwmi MSPower_DeviceWakeEnable -Namespace 'Root\Wmi' | % {
# if($_.InstanceName.ToUpper() -like "$strNetworkAdapterID*"){
if($_.InstanceName.ToUpper().startsWith($strNetworkAdapterID)){
$_.Enable = $true
$_.Put()
}
}
}

http://blogs.technet.com/smsandmom/archive/2008/03/04/configmgr-2007-implementing-wake-on-lan-wol.aspx

# Start-DrawingMode.ps1
# requires -version 2
## requires STA Mode
#
# Invokes WPF InkCanvas to Draw on the screen
#
# /\/\o\/\/ 2008
# Http://thePowerShellGuy.com

Add-Type -AssemblyName PresentationFramework

$window = New-Object Windows.Window
$window.WindowStyle = 'None'
$window.Title = "DRAWING"
$window.AllowsTransparency = $True
$window.Background="#01FFFFFF"
$window.Topmost = $true

$window.WindowState = 'Maximized'

$inkCanvas = New-Object Windows.Controls.InkCanvas
$inkCanvas.Background="Transparent"
#$inkCanvas.DefaultDrawingAttributes.FitToCurve = $true
$window.Content = $inkCanvas

function Set-PenColor ($Color) {
      $inkCanvas.DefaultDrawingAttributes.Color = $Color
}
function Set-PenSize ($Width,$height) {
      $inkCanvas.DefaultDrawingAttributes.Width = $Width
      $inkCanvas.DefaultDrawingAttributes.Height = $Height
}
function Set-Pen ($Color,$Width,$Height) {
      Set-PenColor $Color
      Set-PenSize $width $Height
}

Set-Pen Blue 5 5

$window.Add_KeyDown({
  switch ($_.key) {
    "Q" {$Window.close()}
    "M" {set-pen -Color '#90FFFF00' 5 15}
    "f" {Set-PenSize 2 2}
    "N" {Set-Pen 'Blue' 5 5}
    "T" {Set-PenSize 10 10}
    "B" {Set-PenColor Black}
    "W" {Set-PenColor White}
    "R" {Set-PenColor Red}
    "C" {$inkCanvas.Strokes.Clear()}
    "H" {$window.windowstate = 'Minimized'}
    Default {$Window.close()}
  }
})

$window.Add_MouseRightButtonUp({$inkCanvas.Strokes.Clear()})

$null = $window.ShowDialog()

New-PSDrive -Name SYS -PSProvider filesystem -Root \\live.sysinternals.com\tools
CD  \\live.sysinternals.com\Tools
dir |select name | Format-Wide
*************  mONGO sTUFF ************************
$mongoDriverPath = "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7"
Add-Type -Path "$($mongoDriverPath)\MongoDB.Bson.dll";
Add-Type -Path "$($mongoDriverPath)\MongoDB.Driver.dll";
[MongoDB.Bson.BsonDocument] $doc = @{
    "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();
    "FirstName"= "Justin";
    "LastName"= "Dearing";
    "PhoneNumbers"= [MongoDB.Bson.BsonDocument] @{
        'Home'= '718-555-1212';
        'Mobile'= '646-555-1212';
    };
};
$db = [MongoDB.Driver.MongoDatabase]::Create('mongodb://localhost/profiles');
$collection = $db['example1'];
Write-Host "Insert";
$collection.Insert($doc);
$collection.FindOneById($doc['_id']);

$updates = @{'$set' = @{'email'= 'justin@mongodb.org'}};
$query = @{"_id"= $doc['_id']}

Write-Host "Update";
$collection.Update([MongoDB.Driver.QueryDocument]$query, [MongoDb.Driver.UpdateDocument]$updates);
$collection.FindOneById($doc['_id']);

Write-Host "Delete";
$collection.Remove([MongoDB.Driver.QueryDocument]$query);
$collection.FindOneById($doc['_id']);

**************************  Convert to string or Date  *************************
PS C:\Users\Yves> [system.convert]::ToDateTime("10/10/2022")

October-10-22 12:00:00 AM

PS C:\Users\Yves> [system.convert]::ToString(123,2)
1111011

$a=[system.Enum]::GetValues([system.dayofweek])
$a -join ', '
$s = New-PSSession -ConfigurationName Microsoft.exchange -ConnectionUri https://van-ex1.adatum.com/powershell -authentication kerberos
import-pssession -session $s
dir \\cmesrv01\donnees\Groupes -Recurse |where  {$_.PSIsContainer -eq $true} |% { $folder= $_.fullname; $_.GetAccessControl().access |% {if ($_.isInherited -eq $false -and $_.IdentityReference -notlike "Builtin*")  { If ($folder -ne $oldFolder) { write-host -f yellow $folder} ; $_ | select IdentityReference, FileSystemRights; $oldFolder = $folder}}}

List local administrators group users
$group =[ADSI]"WinNT://./Administrators"
$members = @($group.psbase.Invoke("Members"))
$members | foreach {$_.GetType().InvokeMember("Name", 'GetProperty', $null, $_, $null)}

dnscmd tcdmonssr01 /recordAdd 9.53.10.in-addr.arpa 135 PTR inrxdpesx02-vmo.hstc.hydro.qc.ca
dnscmd /recordadd bigfirm.com mypc A 192.168.1.33
$hash=@{}
$hash["SE_DACL_PRESENT"] = 0x4
$hash["ACCESS_ALLOWED_ACE_TYPE"] = 0x0
$hash["ACCESS_DENIED_ACE_TYPE"] = 0x1
$hash["FILE_ALL_ACCESS"] = 0x1f01ff
$hash["FILE_APPEND_DATA"] = 0x000004
$hash["FILE_DELETE"] = 0x010000
$hash["FILE_DELETE_CHILD"] = 0x000040
$hash["FILE_EXECUTE"] = 0x000020
$hash["FILE_READ_ATTRIBUTES"] = 0x000080
$hash["FILE_READ_CONTROL"] = 0x020000
$hash["FILE_READ_DATA"] = 0x000001
$hash["FILE_READ_EA"] = 0x000008
$hash["FILE_SYNCHRONIZE"] = 0x100000
$hash["FILE_WRITE_ATTRIBUTES"] = 0x000100
$hash["FILE_WRITE_DAC"] = 0x040000
$hash["FILE_WRITE_DATA"] = 0x000002
$hash["FILE_WRITE_EA"] = 0x000010
$hash["FILE_WRITE_OWNER"] = 0x080000

or

$hash[0x4] =  "SE_DACL_PRESENT"
$hash[0x0] =  "ACCESS_ALLOWED_ACE_TYPE"
$hash[0x1] =  "ACCESS_DENIED_ACE_TYPE"
$hash[0x1f01ff] =  "FILE_ALL_ACCESS"
$hash[0x000004] =  "FILE_APPEND_DATA"
$hash[0x010000] =  "FILE_DELETE"
$hash[0x000040] =  "FILE_DELETE_CHILD"
$hash[0x000020] =  "FILE_EXECUTE"
$hash[0x000080] =  "FILE_READ_ATTRIBUTES"
$hash[0x020000] =  "FILE_READ_CONTROL"
$hash[0x000001] =  "FILE_READ_DATA"
$hash[0x000008] =  "FILE_READ_EA"
$hash[0x100000] =  "FILE_SYNCHRONIZE"
$hash[0x000100] =  "FILE_WRITE_ATTRIBUTES"
$hash[0x040000] =  "FILE_WRITE_DAC"
$hash[0x000002] =  "FILE_WRITE_DATA"
$hash[0x000010] =  "FILE_WRITE_EA"
$hash[0x080000] =  "FILE_WRITE_OWNER"

2032127 {$AccessMask = "FullControl"}
1179785 {$AccessMask = "Read"}
1180063 {$AccessMask = "Read, Write"}
1179817 {$AccessMask = "ReadAndExecute"}
-1610612736 {$AccessMask = "ReadAndExecuteExtended"}
1245631 {$AccessMask = "ReadAndExecute, Modify, Write"}
1180095 {$AccessMask = "ReadAndExecute, Write"}
268435456 {$AccessMask = "FullControl (Sub Only)"}
default {$AccessMask = $DACL.AccessMask}

***********  Works on Windows 7, 2008 *********************
([wmiclass]"Win32_SecurityDescriptorHelper").SDDLToBinarySD($acl.Sddl).BinarySD

function ConvertTo-NtAccount ($sid) {(new-object system.security.principal.securityidentifier($sid)).translate([system.security.principal.ntaccount])}
secedit /export /cfg c:\temp\secdump.txt /areas USER_RIGHTS
$a= gc c:\temp\secdump.txt
$start= for ($i= 0; $i -lt $a.count; $i++) { if ($a[$i] -like "``[Privilege Rights]" ) {$i + 1}}
$a[$start..$a.count ] |% {$Priv, $account= $_.split("="); write-host -f GREEN $priv; $accounts= $account.split(","); $accounts | % {if ($_ -notlike "*S-1-*") {$_.trim()} else {$SID=$_.trim().replace("*","");  TRY {(convertto-ntaccount $SID).value}  CATCH {WRITE-WARNING "$SID n'existe pas?"}}}}

**********  Replace using RegEx  *************
[regex]::replace("awefaf :awef  :" , "[: ]", "")  # replace " " or ":" with nothing

***********  Redirect  standard Output  **************
2>&1

**************  Find remote session ******************
Query session
Kill remote session
rwinsta /server:KAM1ASWB01.dnet.domtar 3

dnscmd 10.32.2.12 /enumrecords te.hydro.qc.ca "`@" /type a /Additional  |% { if ($_ -like "*Aging:*") {$_ -replace([regex] "Aging:.......", ([datetime] "1/1/1601").addhours( ($_.substring($_.indexof(":") +1,7) )))}}
**********  Creer un usager avec tous les paramètres   ***********************
get-qaduser qu5895 |% { "new-qaduser -lastname $($_.LastName) -FirstName ""$($_.FirstName)"" -displayname ""$($_.DisplayName)"" -name ""$($_.name)"" -UserPrincipalName $($_.SamAccountName) -LogonName $($_.SamAccountName) -parentcontainer ""$(($_.parentcontainerDN).substring(3,$_.parentcontainerDN.indexof(",") -3))"" -password Harold2012" }
Set-QADUser qu5895 -UserMustChangePassword:$true
*****************  Secure Channel   **************************
You also can use Windows PowerShell with Active Directory Module to reset a computer account. The
following example demonstrates how to reset the secure channel between the local computer and the
domain to which it is joined. You must run this command on the local computer:
Test-ComputerSecureChannel –Repair
Note: You also can reset a remote computer’s password with Windows PowerShell:
invoke-command -computername Workstation1 -scriptblock {reset-computermachinepassword}

To reset the secure channel by using the Active Directory Users and Computers snap-in:
1. Right-click a computer, and then click Reset Account.
2. Click Yes to confirm your choice.
3. Rejoin the computer to the domain, and then restart the computer.

To reset the secure channel by using DSMod:
1. At a command prompt, type the following command:
dsmod computer “ComputerDN” –reset.
2. Rejoin the computer to the domain, and then restart the computer.

To reset the secure channel by using NetDom, at a command prompt, type the following command,
where the credentials belong to the local Administrators group of the computer:
netdom reset MachineName /domain DomainName /UserO UserName /PasswordO {Password | *}
This command resets the secure channel by attempting to reset the password on both the computer and
the domain, so it does not require rejoining or rebooting.

To reset the secure channel by using NLTest, on the computer that has lost its trust, at a command
prompt, type the following command:
NLTEST /SERVER:SERVERNAME /SC_RESET:DOMAIN\DOMAINCONTROLLER
You also can use Windows PowerShell with Active Directory Module to reset a computer
*********************                  ******************************
repadmin /syncall /d: tepp1ssr01.tepreprod.hydro.qc.ca

$q |% -begin {$x=1} -process {$Worksheet.Cells.Item(1 ,$x) =$_ ; $groups =(get-qaduser $_ -service tepreprod).memberof ; 0..$(($groups.count -1 )) |% {$Worksheet.Cells.Item($($_ + 2) ,$x) = $groups[$_]} ; $x++ }
$fichiersAttaches= "C:\Users\qx5404\Documents\TeDev SUS serveur.htm"
*********************  Send-mail de Powershell  *****************
send-mailmessage -smtpserver tepp1smtp.tepreprod.hydro.qc.ca -from INFDDEGSR02@hydro.qc.ca -to landry.mario@hydro.qc.ca `
-subject "Test d'envoie de courriel" -attachment $fichiersAttaches `
-body "Bonjour Mario, je t'envoie ce courriel de test pour confirmer que le tout fonctionne à partir de TEDEV. Confirme moi que tu l'as reçu."
****************  Netsh DHCP commands  ******************
netsh add helper dhcpmon.dll
netsh dhcp show server
$a=netsh dhcp show server |% {if ( $_ -notlike "" -and $_ -notlike "La commande s'est terminée correctement.") {$_.substring(10,($_.indexof("]") -10))}}
*******************  SMTP Analyse  ***********************
"champ FROM`tchamp TO`tserveur expéditeur du courriel`ttype`terreur`tdate">>smtp_analyse.txt
$a="Return-Path","Date:","Diagnostic-Code","Received:","from","Final-Recipient:"
dir \\tcdmonssr01\c`$\inetpub\mailroot\Badmail_29Dec2012\*.bad |% {$b=type $_.fullname |select-string $a ;  "$b[0..$B.COUNT]`t"}smtp-analyse.txt
****************  Uptime   ****************************
$a=(gwmi win32_operatingsystem)
$a.ConverttoDateTime( $a.LastBootUpTime)
gwmi win32_operatingsystem |% {$_.ConverttoDateTime( $_.LastBootUpTime)}

14 janvier 2013 08:45:49

dir "\\cmesrv01\donnees\groupes" -recurse |where  {$_.PSIsContainer} | % { $_.fullname; get-acl | % {$_.access |% {if ($_.IsInherited -eq $false) {$_.IdentityReference.tostring() + "`t" + $_.FileSystemRights.tostring()}}}} d:\scripts\cmesrv02.txt

********************  SMTP COnnection Allow IP  ***************************
gwmi -computername tepp3ssr01.tepreprod -authentication 6 -namespace "root\microsoftiisv2"  IIsIPSecuritySetting | where {$_.name -like "SmtpSvc/1" } | % {$_.ipgrant}

*************** DNSCMD ******************
Permettre Allow Zone Transfers to any server
dnscmd inrzdvsdc01 /ZoneResetSecondaries ..AllZones  /nonsecure
*************  To change zone replication scope  ********************
DnsCmd <ServerName> /ZoneChangeDirectoryPartition <ZoneName> /domain
dnscmd inrzdvsdc01 /ZoneChangeDirectoryPartition ..AllZones /domain
dnscmd inrzdvsdc01 /config ..AllZones /aging 1
dnscmd tepp1ssr01.tepreprod /zoneresetsecondaries ..AllZones /noxfr
dnscmd . /zoneresetsecondaries ..AllZones /securelist 10.32.183.8,10.32.178.137,10.32.178.136
****************  GEt-date  ********************
PS C:\> get-date -format yyyy.MM.dd
2013.02.08
****************** Delete junction points  ********************
$flush=get-item 'C:\$SNAP_201210050752_VOLUMEC$'
$flush.delete()
***************  Open another user's Registry hive  **********************
This runs on a per-user basis at first sign-on:
reg load HKU\DefUser "c:\Users\Default\NTUSER.DAT"
*****************  Pin item to taskbar  **********************
$CSIDL_COMMON_PROGRAMS = 0x17
$CSIDL_PROGRAMS = 2
$objShell = new-Object -com "Shell.Application"
$objAllUsersProgramsFolder = $objShell.NameSpace($CSIDL_COMMON_PROGRAMS)
$strAllUsersProgramsPath = $objAllUsersProgramsFolder.Self.Path
$objFolder = $objShell.Namespace($strAllUsersProgramsPath + "\Accessories\Windows Powershell")
$objFolderItem= $objFolder.ParseName("Windows Powershell.lnk")
if ($objFolderItem.verbs().item(4).name -like "UnpinFromTas&kbar") { $objFolderItem.verbs().item(4).doit()}
*******************
Get-ADUser -Filter * -properties lastlogontimestamp
*******************  Get-acl *******************
function hits{
    $searchDir= $args[0]
    dir -Path $searchDir -Recurse -Force | ? {$_.PsIsContainer} | % {
        $currentFolder = $_.fullname
        $currentAcl = Get-Acl $currentFolder
        $comparison = compare-object $refacl $currentAcl -Property Access
        if ($comparison -ne $null)
        {
            write-host -foreground green $currentFolder ;
            $currentAcl |% {$_.Access |% {$_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() }}
        }
        $comparison = $null
       $refacl = Get-Acl $currentFolder
    }
}

function hits{
[array] $bad="AUTORITE NT\Système", "BUILTIN\Administrateurs", "CREATEUR PROPRIETAIRE"
    $searchDir= $args[0]
#    Write-host -ForegroundColor Green $searchDir
#     $refacl = Get-Acl $searchDir
    dir -Path $searchDir -Recurse -Force | ? {$_.PsIsContainer} | % {
        $currentFolder = $_.fullname
        $currentAcl = Get-Acl $currentFolder
        $comparison = compare-object $refacl $currentAcl -Property Access

        if ($comparison -ne $null)
        {
            write-host -foreground green $currentFolder ;
            $currentAcl |% {$_.Access | % {if ($_.IdentityReference -notlike $bad) {$_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() }}}
        }
        $comparison = $null
       $refacl = Get-Acl $currentFolder
                                                                    }
}
*************  WWN  *************************
Get-WmiObject -class MSFC_FCAdapterHBAAttributes -computername STORMCCR01 -namespace root\WMI
$data = Get-WmiObject -namespace "root\wmi" -class MSFC_FibrePortNPIVAttributes -computer STORMCCR01
$data | select WWPN | foreach {[array]::Reverse($_.WWPN); [BitConverter]::ToUInt64($_.WWPN, 0).ToString("X") }
$data | select WWPN | foreach {[array]::Reverse($_.WWPN); [BitConverter]::ToUInt64($_.WWPN, 0).ToString("X").insert(4, "-").insert(9, "-").insert(14, "-") }

$wwpn=@{}
$a |% {$name=$_;  if (test-connection $_ -count 1 ) {write-host -fore green $name ; $data = Get-WmiObject -namespace "root\wmi" -class MSFC_FibrePortNPIVAttributes -computer $name ;  $fb= $data | select WWPN | foreach {[array]::Reverse($_.WWPN); [BitConverter]::ToUInt64($_.WWPN, 0).ToString("X").insert(4, "-").insert(9, "-").insert(14, "-"); $wwpn[$name]=$fb }}}
$a |% {$name=$_; $data = Get-WmiObject -namespace "root\wmi" -class MSFC_FibrePortNPIVAttributes -computer $name; if ($data -notlike "") {$go=$data | select WWPN | foreach {[array]::Reverse($_.WWPN); [BitConverter]::ToUInt64($_.WWPN, 0).ToString("X").insert(4, "-").insert(9, "-").insert(14, "-") };$c="";  0..($go.count -1) |% {$c+=$go[$_] + "`t"} ;$name + "`t" + $c }}

**************  Vmware WWN  *******************
Connect-VIServer SPROVTLVCS01
Get-VMhost | Get-VMHostHBA -Type FibreChannel | Select VMHost,Device,@{N="WWN";E={"{0:X}"-f$_.PortWorldWideName}} | Sort VMhost,Device

robocopy "S:\__MTL\Legal" c:\ttt /l /e /np /fp /njh /njs /r:0 /w:0 | Select-String "Nouveau fichier", "New File" | Where-Object {$_.Line.Length -ge 248}
$a |% {[string] ($_.line.length -33) + "`t" +   $_.line.substring(33, ([int] $_.line.length -33)).replace("`n","") }

Get-WmiObject -Class CIM_DataFile -Filter "Drive='c:' and Path='\\windows\\'" | where {$_.name.length -gt 40}
*********************  To get all the properties from a WMI query  *************************
$query = "SELECT * FROM CIM_DataFile WHERE Drive ='C:' AND Path='\\Program Files (x86)\\WinZip\\' AND FileName='WZCAB' AND Extension='dll'"
Get-WmiObject -Query $query | Format-List *
***********************  Root DFS TREE  *********************
dfsutil root \\corp\data

$go =dfsutil domain corp |select-string "`t"
$go = $go |% {$_.tostring().trim() }
$go |% { dfsutil root export \\corp\$_ c:\users\ygermain_SA\Documents\dfs-$_.txt }
$go |% { remove-Variable -name $_ }
$go |% {New-Variable -name  $_ -Value $([XML] $G= gc c:\users\ygermain\Documents\dfs-$_.txt; $G)  }
$GO |% { $VAR= Get-Variable -NAME $_ ; $ROOT= $VAR.Value.ROOT.NAME ; if ($VAR.VALUE.ROOT.link -notlike "") { $VAR.VALUE.ROOT.link |% {$NAME= $_.name; $_.target |% {$root.padright(40) + $name.padright(50) + $_."#text"  }} } else {$root.padright(90) + $VAR.VALUE.ROOT.target."#text"}}

Get-ChildItem C:\Test | Select-Object Name, @{Name="Kbytes";Expression={ "{0:N0}" -f ($_.Length / 1Kb) }}
******************  Format in English US  ***********
$a = New-Object System.Globalization.CultureInfo("da-DK")
$b = Get-Date
$b.ToString("d", $a)
gwmi Win32_LogicalDisk -ComputerName CtorFP01 |select deviceid, volumename, @{Name="Size in KB";Expression={  ($_.Size / 1Kb).tostring("N0", $a).padleft(15) }}, @{Name="FreeSpace in KB";Expression={  (($_.freespace / 1Kb)).tostring("N0", $a).padleft(15) }}

*************  Orphaned Vdisk in Vmware  ***********************
$nogood="CDP_PROD_NFS_02
CDP_PROD_NFS_03
CDP_PROD_NFS_05
CDP_PROD_NFS_06
MTL_Storage04
SDPCDPVMW01C01_local
SDPCDPVMW01C02_local
SMTLESX99_storage1
nfs_02
NFS_03
NFS_DEV_02
NFS_DEV_03
CDP_DEV_NFS_test".split()

$report = @()
$arrUsedDisks = Get-View -ViewType VirtualMachine | % {$_.Layout} | % {$_.Disk} | % {$_.DiskFile}
$arrUsedDisks += Get-View -ViewType VirtualMachine | % {$_.Layout} | % {$_.snapshot} |% {$_.snapshotfile} | where {$_ -like "*.vmdk" -and $_ -notlike "*-ctk.vmdk"}
$arrDS = Get-Datastore | Sort-Object -property Name
$arrDS = $arrDS | where { $_.name | select-string $nogood -NotMatch  }

foreach ($strDatastore in $arrDS) {
      Write-Host $strDatastore.Name
      $ds = Get-Datastore -Name $strDatastore.Name | % {Get-View $_.Id}
      $fileQueryFlags = New-Object VMware.Vim.FileQueryFlags
      $fileQueryFlags.FileSize = $true
      $fileQueryFlags.FileType = $true
      $fileQueryFlags.Modification = $true
      $searchSpec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
      $searchSpec.details = $fileQueryFlags
      $searchSpec.matchPattern = "*.vmdk"
      $searchSpec.sortFoldersFirst = $true
      $dsBrowser = Get-View $ds.browser
      $rootPath = "[" + $ds.Name + "]"
      $searchResult = $dsBrowser.SearchDatastoreSubFolders($rootPath, $searchSpec)

      foreach ($folder in $searchResult)
      {
            foreach ($fileResult in $folder.File)
            {
                  if ($fileResult.Path)
                  {
                        if (-not ($arrUsedDisks -contains ($folder.FolderPath + $fileResult.Path))){
                             $row = "" | Select DS, Path, File, Size, ModDate
                             $row.DS = $strDatastore.Name
                             $row.Path = $folder.FolderPath
                             $row.File = $fileResult.Path
                             $row.Size = $fileResult.FileSize
                             $row.ModDate = $fileResult.Modification
                             $report += $row
                        }
                  }
            }
      }
}


<#
           .SYNOPSIS
           This script will list all shares on a computer, and list all the share permissions for each share.

           .DESCRIPTION
           The script will take a list all shares on a local or remote computer.

           .PARAMETER Computer
           Specifies the computer or array of computers to process

           .INPUTS
           Get-SharePermissions accepts pipeline of computer name(s)

           .OUTPUTS
           Produces an array object for each share found.

           .EXAMPLE
           C:\PS> .\Get-SharePermissions # Operates against local computer.

           .EXAMPLE
           C:\PS> 'computerName' | .\Get-SharePermissions

           .EXAMPLE
           C:\PS> Get-Content 'computerlist.txt' | .\Get-SharePermissions | Out-File 'SharePermissions.txt'

           .EXAMPLE
           Get-Help .\Get-SharePermissions -Full
#>

# Written by BigTeddy November 15, 2011
# Last updated 9 September 2012
# Ver. 2.0
# Thanks to Michal Gajda for input with the ACE handling.

[cmdletbinding()]

param([Parameter(ValueFromPipeline=$True,
    ValueFromPipelineByPropertyName=$True)]$Computer = '.')

$shares = gwmi -Class win32_share -ComputerName $computer | select -ExpandProperty Name

foreach ($share in $shares) {
    $acl = $null
    $share
    Write-Host $('-' * $share.Length) -ForegroundColor Green
    $objShareSec = Get-WMIObject -Class Win32_LogicalShareSecuritySetting -Filter "name='$Share'"  -ComputerName $computer
    try {
        $SD = $objShareSec.GetSecurityDescriptor().Descriptor
        foreach($ace in $SD.DACL){
            $UserName = $ace.Trustee.Name
            If ($ace.Trustee.Domain -ne $Null) {$UserName = "$($ace.Trustee.Domain)\$UserName"}
            If ($ace.Trustee.Name -eq $Null) {$UserName = $ace.Trustee.SIDString }
            [Array]$ACL += New-Object Security.AccessControl.FileSystemAccessRule($UserName, $ace.AccessMask, $ace.AceType)
            } #end foreach ACE
        } # end try
    catch
        { Write-Host "Unable to obtain permissions for $share" }
    $ACL
    Write-Host $('=' * 50)
    } # end foreach $share
****************XenApps Stuff  **************************
mstsc /v:sppcdpxaa18
Get-XAApplication  |% {WRITE-HOST -F GREEN $_.DISPLAYNAME; (Get-XAAccount -BrowserName  $_.BrowserName)| % {$_.AccountName }};
Get-XAAdministrator

dir \\corp\data -Recurse -Directory |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access |where {$_.IdentityReference -notlike "AUTORITE NT\*" -and $_.IdentityReference -notlike "BUILTIN\*" -and  $_.IdentityReference -notlike "CREATEUR PROPRIETAIRE"} ; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access | where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType}}} c:\users\ygermain\documents\data2.txt
$a |% {if ($_ -like '\\corp\data\*') {$folder=$_} else {if ($_ -like '*corp\G_TOR_DIR_FORUM_PROJ_2003_JDE_RE_CRP_Testing_USR_RW*' ) {$folder}}}

$c=@()
$c+= $a |% {if ($_ -like '\\corp\data\*') {$folder = $_} else {if ($_ -like '*corp\G_TOR_DIR_FORUM_PROJ_2003_JDE_RE_CRP_Testing_USR_RW*Modify, Synchronize*' ) {
$b=new-object System.Object ; $b | Add-Member -NotePropertyName folder -NotePropertyValue $folder  ; $b | add-member -NotePropertyName Group -NotePropertyValue $group ; $b | Add-Member -NotePropertyName Rights -NotePropertyValue $rights ; $b | Add-Member -NotePropertyName Perms -NotePropertyValue $perms ;
$b.folder=$folder ; $scrap ,$b.group, $b.rights, $b.perms =$_.split("`t") ;$b}}}

$ok =$go |% { $name=$_; $d | % {if ($_.group -like "corp\$name" ) {if ($length -gt $_.folder.length) {$_ |select group, folder, rights} }$length= $_.folder.length; }}

*************** Here-string  ****************
 $a -replace( [char] 10,"") -replace("      New Dir ", [char] 10)dead.txt
**************  Create synthetic object  *********************
[array] $array =$b |% {$object= new-object -TypeName psobject ; $lun, $vdisk, $vhost=$_.split("=").trim(); $object | Add-Member -NotePropertyName Lun -NotePropertyValue $lun; $object | add-member -NotePropertyName vdisk -NotePropertyValue $vdisk ; $Object | Add-Member -NotePropertyName Vhost -NotePropertyValue $vhost ; $object}

dir \\corp\data -Recurse -Directory |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access |where {$_.IdentityReference -notlike "AUTORITE NT\Utilisateurs authentifiés" -and $_.IdentityReference -notlike "BUILTIN\Administrateurs" -and $_.IdentityReference -notlike "BUILTIN\Utilisateurs" -and  $_.IdentityReference -notlike "AUTORITE NT\Système" -and  $_.IdentityReference -notlike "CREATEUR PROPRIETAIRE"} ; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access | where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType}}} >> c:\users\ygermain\documents\data2.txt

$c=@()
$c+= $a |% {if ($_ -like '\\corp\data\*') {$folder = $_} else {
$b=new-object System.Object ; $b | Add-Member -NotePropertyName folder -NotePropertyValue $folder  ; $b | add-member -NotePropertyName Group -NotePropertyValue $group ; $b | Add-Member -NotePropertyName Rights -NotePropertyValue $rights ; $b | Add-Member -NotePropertyName Perms -NotePropertyValue $perms ;
$b.folder=$folder ; $scrap ,$b.group, $b.rights, $b.perms =$_.split("`t") ;$b}}

$c[0..20] |% {[MongoDB.Bson.BsonDocument] $doc = @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"=$_.folder;"group"=$_.group; "rights"=$_.rights; "perms"=$_.perms}}

$a[0..10] |% {if ($_ -like '\\corp\*') {$folder = $_} else {$scrap ,$group, $rights, $perms =$_.split("`t"); [MongoDB.Bson.BsonDocument] $doc = { "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"=$folder;"group"=$group; "rights"=$rights; "perms"=$perms}}}

$rw1 |% {$name ="$_" ; $query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::EQ( "group", "$name"),[MongoDB.Driver.Builders.Query]::matches("rights" , "Modify" )) ;  if ($collection.find($query) -notlike $null) { $result= $collection.find($query).item(3).value ;$rights= $collection.find($query).item(2).value ;$perms= $collection.find($query).item(4).value; If ($result -notlike "") { $sort = $result |sort -Property {$_.length } ; If ($sort[0] -like '\') {$name + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else {$name + "`t" + $sort[0] + "`t" + $rights[0] + " `t" + $perms[0]} ; Remove-Variable result, sort }}}
$a |% {$name =$_.tolower().replace("\","\\") ; $query = [MongoDB.Driver.Builders.Query]::MATCHES( "group", "$name"); if ($collection.find($query) -notlike $null) { $result= $collection.find($query).item(3).value ;$rights= $collection.find($query).item(2).value ;$perms= $collection.find($query).item(4).value; If ($result -notlike "") { $sort = $result |sort -Property {$_.length } ; If ($sort[0] -like '\') {$name + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else {1..$result.count |% { $name + "`t" +  $result.item(($_ - 1)) + "`t" + $rights.item(($_ -1)) + "`t" + $perms.item(($_ -1)) }} ; Remove-Variable result, sort }}} >> C:\users\ygermain\Documents\ntfs\invest-2.txt

Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Bson.dll"
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Driver.dll"
$db = [MongoDB.Driver.MongoDatabase]::Create('mongodb://localhost/awesome?safe=true;slaveok=true')
$collection = $db['groups']

$a[0..10] |% {if ($_ -like '\\*') {$folder = $_} else {$scrap ,$group, $rights, $perms =$_.tolower().split("`t"); [MongoDB.Bson.BsonDocument] $doc = @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $folder;"group"= [string] $group; "rights"=[string] $rights; "perms"= [string] $perms}; $collection.Insert($doc) | Out-Null}}
$query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::MATCHES( "group","MO$"),[MongoDB.Driver.Builders.Query]::matches("rights" , "^Modify*." ))


$query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::MATCHES( "group", "MO$"),[MongoDB.Driver.Builders.Query]::matches("rights" , "^Modify*." ))
$collection.Find($query) |  %{$_.item("group").value + "`t" + $_.item("folder").value  }

"corp\DL_MTL_DIR_SMTLDATAPRT01_R_Templates_Construction" |% {$query = [MongoDB.Driver.Builders.Query]::matches("group" , $($_.replace('\','\\')) ) ; $collection.Find($query) |% {$_.item("folder").value + "`t" + $_.item("rights").value }}

$grp |% {$name ="corp\\$_" ; $query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::EQ( "group", "$name"),[MongoDB.Driver.Builders.Query]::matches("rights" , "^Modify*." )) ;  if ($collection.find($query) -notlike $null) { $result= $collection.find($query).item(3).value ;$rights= $collection.find($query).item(2).value ; If ($result -notlike "") { $sort = $result |sort -Property {$_.length } ; If ($sort[0] -like '\') {$name + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else {$name + "`t" + $sort[0] + "`t" + $rights[0] + "`t" + $perms[0]} ; Remove-Variable result, sort }}}
$a |% {$name =$_.tolower().replace("\","\\") ; $query = [MongoDB.Driver.Builders.Query]::MATCHES( "group", "$name"); if ($collection.find($query) -notlike $null) { $result= $collection.find($query).item(3).value ;$rights= $collection.find($query).item(2).value ;$perms= $collection.find($query).item(4).value; If ($result -notlike "") { $sort = $result |sort -Property {$_.length } ; If ($sort[0] -like '\') {$name + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else { if ($sort[($sort.count- 1 )].contains(($sort[0].substring(0, $sort[0].lastindexof("\"))))) {0,($sort.count-1) |% {$name + "`t" +  $sort[$_] + "`t" + $rights[$_] + "`t" + $perms[$_]+ "`t" + $sort.count}} else  { 1..$result.count |% { $name + "`t" +  $result.item(($_ - 1)) + "`t" + $rights.item(($_ -1)) + "`t" + $perms.item(($_ -1)) + "`t" + $sort.count}}  }}} }

"ls-dir-g_gestion_d'actifs-mo" |% {$name =$_.tolower().replace("\","\\") ; $query = [MongoDB.Driver.Builders.Query]::MATCHES( "group", "$name"); $find = $collection.find($query);  if ($find -notlike $null) { $result= $find.item(3).value ;$rights= $find.item(2).value ; $perms= $find.item(4).value;
If ($result -notlike "") {
$sort = $result |sort ;
If ($sort[0] -like '\') {
$name + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else {
if ($sort[($sort.count- 1 )].contains($sort[0])) {0,($sort.count-1) |% {$name + "`t" +  $sort[$_] + "`t" + $rights[$_] + "`t" + $perms[$_] + "`t" + $sort.count}} else
{$name; $start= $sort[0]; $sort | % {if (($start.ToCharArray() |Select-String "\\").count -gt 4) {$short= $start.substring(0 , $start.lastindexof("\"))} else {$short= $start};
if ($_.contains($short) ) {$short} else { $Short; $start = $_ } }|group -noelement |select name, count |ft -auto }}  }}}

$other = $all | where {$_ -notlike "*_RW" -and $_ -notlike "*RW_*"  -and $_ -notlike "*criture" -and $_ -notlike "*_W_*"  -and $_ -notlike "*_MO"  -and $_ -notlike "*_MRW"  -and $_ -notlike "*LS-DIR-EUR-PAR-Fiscal-RW" -and $_ -notlike "*_RO" -and $_ -notlike "*RO_*"  -and $_ -notlike "*ecture" -and $_ -notlike "*_R_*" -and  $_ -notlike "*_R"  -and $_ -notlike "*_MRO"  }

function Remove-Diacritics {
param ([String]$src = [String]::Empty)
  $normalized = $src.Normalize( [Text.NormalizationForm]::FormD )
  $sb = new-object Text.StringBuilder
  $normalized.ToCharArray() | % {
    if( [Globalization.CharUnicodeInfo]::GetUnicodeCategory($_) -ne [Globalization.UnicodeCategory]::NonSpacingMark) {
      [void]$sb.Append($_)
    }
  }
  $sb.ToString()
}


get-qaduser  -SearchRoot "OU=__MTL,OU=Regular Users,OU=MTL,OU=Users,OU=Clients,OU=IC,DC=corp,DC=ivanhoecambridge,DC=com", "OU=User,OU=Accounts,OU=SITQ,DC=corp,DC=ivanhoecambridge,DC=com" , "OU=User,OU=Accounts,OU=corp,DC=corp,DC=ivanhoecambridge,DC=com"  -LdapFilter "(|(physicalDeliveryOfficeName=Centre CDP Capital)(physicalDeliveryOfficeName=Bureau de Montréal)(physicalDeliveryOfficeName=Eight Avenue Place)(physicalDeliveryOfficeName=1000 De La Gauchetière)(physicalDeliveryOfficeName=Montreal Office)(physicalDeliveryOfficeName=Place Ville Marie)(physicalDeliveryOfficeName=Centre de Commerce Mondial)(physicalDeliveryOfficeName=1001 square victoria)(physicalDeliveryOfficeName=1000, place Jean-Paul Riopelle)(physicalDeliveryOfficeName=Edifice Price))(telephoneNumber=*)(!(telephoneNumber=N/A))(!(telephoneNumber=N\5cA))(givenName=*)(sn=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2))" | % { '"' + $_.samaccountname + '","' + $_.firstname + " " + $( if( $_.initials -notlike "" ) {$_.initials}) + '","' + $_.Lastname + '","' +  $_.Department + '"' + $( $tel=$_.telephonenumber.trim().replace("`)", "") ;$length= $tel.length ; ',"' + $tel.substring(($length -4), 4) + '"') } | % {Remove-Diacritics $_} | Out-File -Encoding Ascii -FilePath test.csv

$wmi ="select * from win32_printer where Name =  '\\\\SMTLDATAPRT01\\PMTLS11503' and default = 'True' "
gwmi -Query $wmi

gc .\Missing_Global2.txt |% {$Global, $desc, $local = $_.split("`t")  ; $go= get-qadgroup $global ; write-host -f green $local ; $all= get-qadgroupmember $local | where {$_ -notlike $go -and $_.dn -notlike "*CN=ForeignSecurityPrincipals,DC=corp,DC=ivanhoecambridge,DC=com"}; remove-qadgroupmember $local -Member $all -WhatIf }

function queryall { $group=$args.tolower()  ;
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Bson.dll"
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Driver.dll"
$db = [MongoDB.Driver.MongoDatabase]::Create('mongodb://localhost/awesome?safe=true;slaveok=true')
$collection = $db['groups']
$group= $Group.replace('\',"\\") ;
write-host -f green $group.replace('\\','\');
$query =[MongoDB.Driver.Builders.Query]::matches("group", $group ) ;
$collection.find($query) |select @{name="group";e={ $_.item("group").value }},@{name="folder";e={ $_.item("folder").value }}, @{name="perms";e={ $_.item("perms").value }},@{name="InheritanceFlags";e={ $_.item("InheritanceFlags").value }} ,@{name="IsInherited";e={ $_.item("IsInherited").value }} ,@{name="rights";e={ $_.item("rights").value }}
}

function query { $group=$args.tolower()  ;
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Bson.dll"
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Driver.dll"
$db = [MongoDB.Driver.MongoDatabase]::Create('mongodb://localhost/awesome?safe=true;slaveok=true')
$collection = $db['groups']
if ($group -like "*-RO") {$rights ="ReadAndExecute, Synchronize"} else {if ($group -like "*-MO") {$rights ="Modify, Synchronize"} else {if ($group -like "*-RW") {$rights ="modify, synchronize"} else {if ($group -like "*-LI") {$rights ="ReadData, Synchronize"} else {if ($group -like "*-FC") {$rights ="FullControl"}}}}}
$group= $Group.replace('ca\','ca\\') ;
write-host -f green $group;
$query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::matches("group", $group ),[MongoDB.Driver.Builders.Query]::matches("rights", $rights.tolower() )) ;$data= $collection.find($query); $data |% {$_.item("folder").value } }

$collection.find($query) |select @{name="group";e={ $_.item("group").value }},@{name="folder";e={ $_.item("folder").value }}, @{name="perms";e={ $_.item("perms").value }},@{name="InheritanceFlags";e={ $_.item("InheritanceFlags").value }} ,@{name="IsInherited";e={ $_.item("IsInherited").value }} ,@{name="rights";e={ $_.item("rights").value }} | where group -like "ca*"|select group, folder, rights


get-qadgroup LS-DIR -SearchRoot "OU=NTFS,OU=Groups,OU=corp,DC=corp,DC=ivanhoecambridge,DC=com" |% {$a=query $_.name |sort ; if ($a.count -le 1) {$A} else {if (($a[($a.count -1)]).contains($a[0])) { $a[0]  + "`t `t" + $a.count} else {$a} }}
$b|% {$a=queryall $_.name |sort ; if ($a.count -le 1) {$A} else  {$last = $a[($a.count -1)] ; if (($last.substring(0, $last.lastindexof('\')) ).contains(($a[0]).substring(0, ($a[0]).lastindexof('\')))) { $a[0]  + "`t `t" + $a.count} else {$a[0] ; $last } }}

********  XML **************
$file = "\\corp\temp\temp\pcaron\Services.xml"
$x = [xml] (Get-Content $file)
Select-Xml -xml $x  -XPath /configuration/ServiceConfig/ServiceSection |% {$_.node.services.service | where {$_.name -like "JobLogSerializer" } | % {$_.startmode ="auto"}}
Select-Xml -xml $x  -XPath /configuration/ServiceConfig/ServiceSection |% {$_.node.services.service | where {$_.name -like "JobExecutionSerialize" } | % {$_.startmode ="auto"}}
$x.save($file)

************  WMIC  ***************
wmic /OUTPUT:c:\users\ygermain\documents\wmic.txt printer  get name, default, comment, network
$c=0; get-qadgroup LS-DIR -SearchRoot "OU=NTFS,OU=Groups,OU=corp,DC=corp,DC=ivanhoecambridge,DC=com" -SizeLimit 0|% {$a=query $_.name |sort ; if ($a.count -le 1) {$A} else {if (($a[($a.count -1)]).contains($a[0].substring(0,$a[0].lastindexof("\")))) { $a[0]  + "`t `t" + $a.count} else {$a ; $c++; $c} }}

$other="APPS","AppsBur","Citrix-Profiles","MSI_PKG","NAS","Profiles$","Temp","Deploy"

foreach ( $job in $other) {$_; start-job -name $job -ArgumentList $job -ScriptBlock {dir \\corp\$args -Recurse -Directory |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access| where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType.tostring()  + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()}}}>> ("c:\users\ygermain\documents\ntfs\" + $args + ".txt")}}

start-job -name datajob    -ArgumentList    "data" -ScriptBlock { $args |% {dir \\corp\$_ -Recurse -Directory}|% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access ; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access| where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()}}} >>c:\users\ygermain\documents\ntfs\data.txt}
start-job -name groupesjob -ArgumentList "groupes" -ScriptBlock { $args |% {dir \\corp\$_ -Recurse -Directory}|% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access ; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access| where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()}}} >>c:\users\ygermain\documents\ntfs\groupes.txt}

get-mailbox -resultsize unlimited -Server smtlecms01 |% { get-mailboxpermission $_ }  |where { $_.isinherited -like $false} |  % {$_.Identity.name; "`t" + $_.user + "`t" + $_.accessrights + "`t" + $(if ($_.deny) {"deny"} else {"allow"}) }>> c:\users\ygermain_sa\Documents\ntfs\exchange.txt

$servers="callisto","smtlapps01","SMTLFPCL02","SMTLERPPRT1","SMTLRDP02","SPPCDPEBA01","SPVCDPFIL01","SPVTCOFIL01","CACDPHYP01","SMTLDATAPRT01","MVIC06-WKOL01","MVIC06-WRAD01","V-EMS01","MVIC06-WSQLSTAG","MTLVIC-WKS011","MVIC06-WSTAGE01","MVIC06-WWSS01","MVIC06-WAP01","MVIC06-WWEB01","MTLVIC-OTM01","SPROVTLCPM01"

foreach ($Server in $servers) {
$drive= gwmi Win32_LogicalDisk -ComputerName $server | where {$_.drivetype -like "3"} | % {$_.pscomputername + "\" +  $($_.DeviceID.replace(":",'$')) }
start-job -name $server -ArgumentList $drive, $server -ScriptBlock {$server=$args[1] ; $args[0] |% { dir \\$_ -Recurse -Directory} |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access ; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access| where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()}}}c:\users\ygermain\documents\ntfs\$server.txt}}
start-job -name AD -ScriptBlock {import-module ActiveDirectory; cd ad: ; cd \"dc=corp,dc=ivanhoecambridge,dc=com"; dir -Recurse |% {$DN=$_.DistinguishedName ; $access= (get-acl $_.pspath ).access | where {$_.IsInherited -like $false } ; if ($access -notlike "") {$dn ; $access |% {"`t" + $_.IdentityReference.tostring() +"`t" + $_.ActiveDirectoryRights.tostring() + "`t" + $_.AccessControlType.tostring() + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()} }} >> c:\users\ygermain\Documents\ntfs\ad.txt }
start-job -name AD -ScriptBlock {import-module ActiveDirectory; cd ad: ; cd \"dc=ca,dc=HQ,dc=medisna,dc=com"; dir -Recurse |% {$DN=$_.DistinguishedName ; $access= (get-acl $_.pspath ).access | where {$_.IsInherited -like $false } ; if ($access -notlike "") {$dn ; $access |% {"`t" + $_.IdentityReference.tostring() +"`t" + $_.ActiveDirectoryRights.tostring() + "`t" + $_.AccessControlType.tostring() + "`t" + $_.PropagationFlags.tostring() +"`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()} }} >> c:\users\ygermain_sa\Documents\ntfs\ad.txt }

import-module groupPolicy
get-gpo -All|% { $folder= $_.displayname; Get-GPPermissions -all  $_.displayname |% {$folder; "`t" + $_.trustee.domain + '\' + $_.Trustee.name + "`t" + $_.Permission + "`tallow"  }} | out-file c:\users\ygermain\Documents\ntfs\gpo.txt
start-job -name dfs -ScriptBlock {"folder`tgroup`trights" >C:\users\ygermain\documents\ntfs\dfs.txt; dfsutil /domain:corp /view  | where { $_ | select-string "`t`t*"} |% {$root= $_.trim(); dfsutil /root:corp\$root /view | where { $_ -like "`tLink name*"} |% {$scrap, $target, $scrap = $_.split('"') ; dfsutil property acl "\\corp\$root\$target" |where {$_ -like "*:*"} |% {$scrap = $_.split(":\"); "\\corp\$root\$target" + "`t" +  $scrap[$scrap.length -2 ] + "`t" + "(DFS) " + $scrap[$scrap.length -1 ].replace("(","").replace(")","")}}}C:\users\ygermain\documents\ntfs\dfs.txt}

Enter-PSSession sppcdpxaa15
Add-PSSnapin Citrix.Common.Commands -PassThru
Add-PSSnapin Citrix.XenApp.Commands
Add-PSSnapin Citrix.XenApp.Commands -PassThru
del xen-admin.txt
del xen.txt
Get-XAApplication  |% { "XenApp/" + $_.folderpath + '/' + $_.displaynamexen.txt; (Get-XAAccount -BrowserName  $_.BrowserName)| % {$_.AccountNamexen.txt }}
Get-XAAdministrator | % {$_.AdministratorName} xen-admin.txt
exit
copy "\\sppcdpxaa15\c`$\users\Adm1nYG\Documents\xen.txt" c:\Users\ygermain\Documents\ntfs\xen-perms.txt
copy "\\sppcdpxaa15\c`$\users\Adm1nYG\Documents\xen-admin.txt" c:\Users\ygermain\Documents\ntfs\xen-admin.txt

"folder","group","flag","perms","rights","PropagationFlags""IsInherited","InheritanceFlags" |% { $collection.EnsureIndex( $_) }
dir *.txt -Exclude ad.txt, exchange.txt, gpo.txt, Xen-*.txt, dfs.txt |% { gc $_.fullname |% {if ($_ -like '\\*') {$folder = $_.tolower()} else {$scrap ,$group, $rights, $perms, $PropagationFlags, $IsInherited, $InheritanceFlags =$_.tolower().split("`t"); [MongoDB.Bson.BsonDocument] $doc = @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $folder;"group"= [string] $group; "rights"=[string] $rights; "perms"= [string]$perms; "PropagationFlags" = [string]$PropagationFlags ; "IsInherited" = [string] $IsInherited; "InheritanceFlags" = [string] $InheritanceFlags }  ; $collection.Insert($doc) | Out-Null }}}
gc exchange.txt , gpo.txt |% {if ($_ -notlike "`t*") {$folder = $_.tolower()} else {$scrap, $group, $rights, $perms, $flag =$_.tolower().split("`t"); [MongoDB.Bson.BsonDocument] $doc= @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $folder;"group"= [string] $group; "rights"=[string] $rights; "perms"= [string] $perms};  "PropagationFlags" = [string]$PropagationFlags ; "IsInherited" = [string] $IsInherited; "InheritanceFlags" = [string] $InheritanceFlags}; $collection.Insert($doc) | Out-Null}}
gc ad.txt  |% {if ($_ -like "*=*") {$folder = $_.tolower()} else {$scrap, $group, $rights, $perms, $flag =$_.tolower().split("`t"); [MongoDB.Bson.BsonDocument] $doc= @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $folder;"group"= [string] $group; "rights"=[string] $rights; "perms"= [string] $perms ; "flag"= [string] $flag}; $collection.Insert($doc) | Out-Null}}
gc adSITQ.txt  |% {if ($_ -like "*=*") {$folder = $_.tolower()} else {$scrap, $group, $rights, $perms, $flag =$_.tolower().split("`t"); [MongoDB.Bson.BsonDocument] $doc= @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $folder;"group"= [string] $group; "rights"=[string] $rights; "perms"= [string] $perms ; "flag"= [string] $flag}; $collection.Insert($doc) | Out-Null}}
$dfs = import-csv .\dfs.txt -Delimiter `t
$dfs |% { [MongoDB.Bson.BsonDocument] $doc = @{ "_id"= [MongoDB.Bson.ObjectId]::GenerateNewId();"folder"= [string] $_.folder;"group"= [string] $_.group; "rights"=[string] $_.rights; "perms"= [string]$perms}  ; $collection.Insert($doc) | Out-Null }

*****************************
function inbed_group {if ($args[0].trim() -like $args[1]) {write-host -f green $( $space + $args[0].toupper()) } else { $space + $args[0]} ;$members= if ($args[0] -notlike "Domain Users") {get-qadgroupmember $args[0] -SizeLimit 0 | where {$_.type -like "group"}} ; if ($members -notlike "") {$space=$space+ "   " ;$members |% {inbed_group $_.name $first}} }

function Member_of {"$space$args" ; $members =(get-qadgroup "$args").memberof ; if ($members -notlike "") { $space= $space + "  "; $members |% {Member_of $_.substring(3,$_.indexof(",")-3) }}}

$a |% {$first= $_ ; $c = member_of $_; if ($c.count -gt 1) { $c[($c.count -1)].trim() | % {inbed_group $_ $first}; "*************";}}
remove-variable z; $z=@{}; $a.name |% { $first= $_ ; $c = member_of $_; if ($c.count -gt 1) { $c[($c.count -1)].trim() | % {if ($z[$_] -like $null ) {$z[$_] = "Done" ; inbed_group $_ $first; "*************";}}}}
***************  GPO printer stuff  ************************
Get-GPOReport -All -ReportType Xml -Path C:\users\ygermain\Documents\gpo\gporeport.xml
$xml= new-object xml
$xml.Load([string] "C:\users\ygermain\Documents\gpo\gporeport.xml")
$xml.report.gpo |% { $name= $_.name ; $_.user.Extensiondata |where {$_.name -like "Deployed Printer Connections Policy" }  |% {write-host -f green $name; $_.extension|% {$_.printerconnection}}}
$xml.report.gpo  |% {$name=$_.name;  $_.user.Extensiondata |where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.sharedprinter |% {write-host -f cyan $_.name; $_.filters.filtergroup |select name} }}}
$xml.report.gpo  |% {$name=$_.name;  $_.user.Extensiondata |where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.sharedprinter |% {write-host -f cyan $_.properties.path; if ($_.filters.filtergroup) {$_.filters.filtergroup | % {$_.name ; get-qadgroup $_.name}} ; if ($_.filters.FilterIpRange){ $_.filters.FilterIpRange | % {$_.min + "`t" + $_.max } }}}}}
$xml.report.GPO | % {$nogood=0; $linked = 0 ;$name=$_.name;  $_.linksto |% {if ($_.enabled -like $true) {$linked=1}} ;if ($_.linksto -like "") {$nogood=1} ; if ($nogood -eq 1 -or $linked -eq 0) {write-host -f green $name ; $_.linksto} }
$xml.report.gpo  | where {$_.name -like "USR-Windows7Printers_stage"} |% {$name=$_.name;  $_.user.Extensiondata |where {$_.name -like "Printers" } |% { $name; $_.extension.printers |% {$_.sharedprinter |% {$ok="";  $printer= $_.name ;if ($_.filters.filtergroup) {$_.filters.filtergroup | % { if (get-qadgroup $_.name) {$ok=1 } ; if ($ok -notlike "1" ) { $printer }} ; }}}}}
$xml.report.gpo  | Where {$_.name -like "USR-Windows7Printers" -and $_.name -notlike "USR-Windows7Printers_Stage"} |% {$name=$_.name;  $_.user.Extensiondata |where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.sharedprinter |% {If ($_.disabled -like "1") {write-warning $_.name} else {write-host -f cyan $_.name}; if ($_.filters.filtergroup) {$_.filters.filtergroup | % {$_.name ; get-qadgroup $_.name}} ; if ($_.filters.FilterIpRange){ $_.filters.FilterIpRange | % {$_.min + "`t" + $_.max } }}}}}

$xml.report.gpo |% {$name=$_.name;  $_.user.Extensiondata |where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.sharedprinter|% {If ($_.disabled -like "1") {write-warning $_.name} else {write-host -f cyan $_.name ; $_.properties.path}; if ($_.filters.filtergroup) {$_.filters.filtergroup | % {$_.name ; get-qadgroup $_.name}} ; if ($_.filters.FilterIpRange){ $_.filters.FilterIpRange | % {$_.min + "`t" + $_.max } }}}}}

$xml.report.gpo | where {$_.computer.enabled -like "true" -and $_.computer.ExtensionData -notlike ""} |% {write-host -f green $_.name;  $name= $_.computer.ExtensionData |% {$_.extension.type} ; $name |% {write-host -f cyan $_}; $data = $_.computer.ExtensionData ; $name |% {$name |% { $scrap, $type =$_.split(":") ; $data.extension.$type}}
$map.report.gpo  | Where {$_.name -notlike "USR-Windows7Printers_lab532" -and $_.name -notlike "USR-Windows7Printers_Stage"} |% {$name=$_.name;  $_.user.Extensiondata|where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.sharedprinter |% {If ($_.disabled -like "1") {write-warning $_.properties.path} else {write-host -f cyan $_.properties.path   $_.properties.action }; if ($_.filters.filtergroup) {$_.filters.filtergroup | % {$_.name ; get-qadgroup $_.name}} ; if ($_.filters.FilterIpRange){ $_.filters.FilterIpRange | % {$_.min + "`t" + $_.max } }}}}}
$a=@{}
dir HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions| % { $a[$_.PSChildName] =  $_.getvalue("Name") ; }
$map.report.GPO |% {$name =$_.name ; $_.User.ExtensionData.extension |where {$_.folder } |% {write-host -ForegroundColor Green $name;  $_.folder |% {if ( $_.location.destinationpath -notlike "" -and $_.movecontents -like $true) {$A[$_.id] ; $_.location.destinationPath ; } }}}
********* View or list active directory inheritance / Inheritable Permissions checkbox  *************
Get-QADUser -SizeLimit 0 | Select-Object Name,@{n=’IncludeInheritablePermissions’;e={!$_.DirectoryEntry.PSBase.ObjectSecurity.AreAccessRulesProtected}}
********************* ActiveSync **************************
$users=get-casmailbox -resultSize Unlimited | where {$_.HasActiveSyncDevicePartnership -eq $true}
$users | foreach {$id = $_.identity;  get-activesyncdevicestatistics -mailbox $id } |select @{Name="User"; Expression={$ok, $scrap = $_.Identity.tostring().split('@'); $ok }}, DeviceFriendlyName, DeviceOS, DeviceUserAgent, LastSuccessSync |ft

start-job -name datajob -ArgumentList "data" -ScriptBlock { $args |% { dir \\corp\data\FORUM\Committees  -Directory } |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access ; If (($access|% {$_.isinherited }) -like $false ) {$folder ; $access | % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType}}}c:\users\ygermain\documents\ntfs\data2.txt}}
start-job -name groupjob -ArgumentList "groupes" -ScriptBlock { $args |% { dir \\SITQ\$_ -recurse -Directory } |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access ; If (($access|% {$_.isinherited }) -like $false ) {$folder ; $access | % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType}}}c:\users\ygermain\documents\ntfs\group2.txt}}

$a = gc C:\users\ygermain\Documents\jur\Arborescence_20140106_AffJuridReorgRepertoires.txt
$c=@{}
$a |% {$d="";  $b=$_.TrimEnd().split("`t"); $c[$b.count - 1] = $b[$b.count -1]; 0..($b.count -1) |% {$d+=$c[$_] + "\" } ; md "\\spscdpcif01\Groupes\$d" }
net use g: \\sitq\groupes
net use s: \\corp\data
$a |% {$d="";  $b=$_.TrimEnd().split("`t"); $c[$b.count - 1] = $b[$b.count -1]; 0..($b.count -1) |% {$d+=$c[$_] + "\" } ; md "\\spscdpcif01\Groupes\$d"}
gc .\mappings.txt |% {$source, $target=$_.split("`t") ; robocopy $source $target /s /e /create /r:0 /W:0 /LOG+:log.txt}
robocopy "S:\__MTL\Conseil_Groupe_Ivanhoe_Cambridge\Gouvernance\Mandat,Charte des Comités & Politique Trésorerie" "\\spscdpcif01\Groupes\Legal\Conseil\Administratif\PortailPublication" /LEV:1 /create /LOG+:log.txt

*************** Change permissions on files only **************
icacls  .\Admin\Archives /grant "SDRPDATAPRT01\15 - Gestion documentaire:(OI)(IO)(M)"
icacls.exe D:\Legal\Operation\3BurOff\ModlTemplate /grant "SDRPDATAPRT01\7 - Operations Droits spéciaux:(OI)(CI)(M)"
***********************  Sort folders by groups.  **************************
|% {$group =$_.tolower().replace("\","\\") ;
if ($group -like "*-RO") {$rights ="readandexecute, synchronize"} else {if ($group -like "*-MO") {$rights ="modify, synchronize"} else {if ($group -like "*-RO") {$rights ="modify, synchronize"} else {if ($group -like "*-LI") {$rights ="readdata, synchronize"} else {if ($group -like "*-FC") {$rights ="fullcontrol"} else {$rights =''}}}}}
write-host -f green $group;
if ($rights -notlike "") {
$query = [MongoDB.Driver.Builders.Query]::AND([MongoDB.Driver.Builders.Query]::matches("group", $group ),[MongoDB.Driver.Builders.Query]::matches("rights", $rights )) } else {
$query = [MongoDB.Driver.Builders.Query]::matches("group", $group )}
$find = $collection.find($query);
if ($find -like $null -and $rights -notlike $null)  {$query = [MongoDB.Driver.Builders.Query]::matches("group", $group );
$find = $collection.find($query).setsortorder("folder");
}
if ($find -notlike $null) { $result= $find.item(3).value ;$rights= $find.item(2).value ; $perms= $find.item(4).value;
$sort = $result ;
If ($sort[0] -like '\') {
$Group + "`t" +  $sort + "`t" + $rights + "`t" + $perms} else {
if ($sort[($sort.count- 1 )].contains($sort[0])) {0,($sort.count-1) |% {$group + "`t" +  $sort[$_] + "`t" + $rights[$_] + "`t" + $perms[$_] + "`t" + $sort.count}} else
{$group; $start= $sort[0]; $sort | % {if (($start.ToCharArray() |Select-String "\\").count -gt 4) {$short= $start.substring(0 , $start.lastindexof("\"))} else {$short= $start};
if ($_.contains($short) ) {$short} else { $Short; $start = $_ } }|group -noelement |select name, count |ft -auto }}  }}

get-vm |% { $_.name +"`t" + $_.folder + "`t" + $(if ($_.description) {$_.Description.replace("`n","").replace("`t","")}) +"`t" + $(if ($_.notes){$_.notes.replace("`n","").replace("`t","")}) + "`t" + $_.NumCPU.tostring() + "`t" + $_.MemoryGB.tostring() + "`t" + $(foreach ($guest in $(get-vmguest  $_.name))  {$guest |% { $_.vmname + "`t" + $_.Hostname + "`t" + $_.State + "`t" +  $_.OSFullName +"`t" +   $_.IPAddress + $($_.disks | % {"`t" + $_.path + "`t" + [math]::round($_.freespacegb, 2) + "`t" +  [math]::round($_.capacityGB, 2)  + "`t" + $(if ($_.capacityGB) { ([math]::round( ($_.freespacegb / $_.capacityGB) *100, 2 )).tostring() + "%" }) }) }} )} c:\users\ygermain\Documents\vm2.txt
****************  Version of Vmware Tools  **************************
get-vm SLVCDPPRT01 | % { get-view $_.id } | select Name, @{ Name="ToolsVersion"; Expression={$_.config.tools.toolsVersion}}
Get-WMIObject Win32_Group -filter "domain='$env:computername'" | select -ExpandProperty name
********  Reverse an array  **************
$a = ipconfig
$a
[array]::reverse($a)
$a
***********************  GPO  ***********************
function decrease { param ($scope, $gpo); if ($scope -notlike "OU=SITQ,DC=corp,DC=ivanhoecambridge,DC=com" -and $scope -notlike "OU=IC,DC=corp,DC=ivanhoecambridge,DC=com" ){ write-host -f Green $scope; $gpo | where {$_.scope -like $scope} ; $scope= $scope.substring($scope.indexof(",") +1 ) ; if ( (Get-GPInheritance $scope).GpoInheritanceBlocked) { decrease $scope $gpo; $scope }}}
************************* Change printer driver *********************
rundll32 printui.dll PrintUIEntry

(gc $mappings) |% {$source, $target, $scrap=$_.split("`t") ; if($target -and $scrap -notlike "Documents seulement*") { $target= "\\sdrpdataprt01\data2\$target"; write-host -f "green" $source;  write-host -ForegroundColor yellow $target; diff $((dir $source -Recurse -File).name) $((dir $target -Recurse -file).name)  }}
**************************  AD Forest  ********************************
 $adCtx = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext("forest", "sitq.com")
 [System.DirectoryServices.ActiveDirectory.Forest]::GetForest( $adCtx)

************************* GPO Drive Mappings  ****************************************************
Get-GPOReport -all -ReportType Xml -Path "c:\temp\gporeport.xml"
[xml] $gpo= gc "C:\temp\gporeport.xml"
[xml] $gpo = Get-GPOReport -all -ReportType xml;
**********  faster method to load XML  ********************
$xml = New-Object -TypeName XML
$xml.load("C:\temp\gporeport.xml")
$gpo.report.gpo |foreach-object {$name = $_.name; $_.COMPUTER.ExtensionData.Extension.RestrictedGroups |select @{name = "Gpo name" ;e = {$name}},@{name = "Member";e = {$_.groupname.name."#Text"}}, @{name = "Memberof" ;e = {$_.memberof.name."#text"}}, @{name = "Groupsmembers" ;e = {$_.member.name."#text"}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.computer.ExtensionData.extension.LocalUsersAndGroups.group.properties | select @{ name = "Gpo Name" ;e = {$name}}, Groupname, Action, deleteAllUsers, deleteAllGroups, removeAccounts,@{ name = "Members" ;e = {$_.Members.member.Name}}} | ft -AutoSize
$gpo.report.GPO |foreach-object {$name = $_.name; $orgUnit = $_.computer.ExtensionData.extension.LocalUsersAndGroups.group.filters.FilterOrgUnit; $_.computer.ExtensionData.extension.LocalUsersAndGroups.group.properties | select @{ name = "Gpo Name" ;e = {$name}}, Groupname, Action, deleteAllUsers, deleteAllGroups, removeAccounts,@{ name = "Members" ;e = {$_.Members.member.Name}}, @{ name ="OrgUnit"; e= {$OrgUnit }}} | ft -AutoSize
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.DriveMapSettings |foreach-object { if ($_.drive){ write-host -ForegroundColor Green $name; $_.drive |foreach-object{ $_.name.padright(5)  + $_.properties.path.padright(70) + "`t" +  $_.properties.action + "`t" + $_.properties.ThisDrive + "`t" + $_.filters.filtergroup.bool + "`t" + $(if ($_.filters.filtergroup.not -eq 1){" not member "} else {"`t"}) + $_.filters.filtergroup.name}}}}
$gpo.report.GPO |foreach-object {$name = $_.name ; $_.linksto | select-object @{ name = "GPO Name";e = { $name}}, SOMPath, Enabled, NoOverride}
$gpo.report.GPO |foreach-object {$name = $_.name;  $_.user.ExtensionData.extension.Folder.location  | select @{ name = "GPO Name" ;e = {$name }}, DestinationPath , @{ name = "SecurityGroup"; e = {$_.SecurityGroup.name."#text" }}}
$gpo.report.GPO |foreach-object { if ($_.computer.extensiondata.extension.type -like "*SoftwareInstallationSettings") {$name = $_.name ;$_.computer.extensiondata.extension.msiapplication |select @{name="Gpo name"; e= {$name}}, Name, Path}} | ft -AutoSize
$gpo.report.gpo |foreach-object {$name = $_.name ; $_.user.extensiondata.extension.ProxySettings | %{ $http = $_.http; $NoProxyInternet=  $_.NoProxyIntranet; $usesameproxy = $_.usesameproxy ; $_.ProxyAddressException  | select  @{name = "GPO Name";e = {$name}},  @{name = "Proxy exception Domain"; e ={$_} } , @{name = "NoProxyInternet" ;e = {$NoProxyInternet}},  @{name = "Http Port"; e = {$http.port }}, @{name = "Proxy Address"; e = {$http.Address }}, @{name = "usesameproxy" ;e = {$usesameproxy}}}} |ft
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.homepage | select @{name = "GPO Name"; e = {$name}}, value }
$gpo.report.gpo |foreach-object {$name = $_.name; $_.computer.extensiondata.extension.UserRightsAssignment |foreach-object { $assignment = $_.name; $_.member.name |select @{name = "GPO Name" ; e = {$name}}, @{name = "assignment" ; e = {$assignment}}, @{name = "User" ; e = {$_."#text"}}}}
$gpo.report.gpo |foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy |where {$_.Category -like "Windows Components/Windows Update"} | %{$_.edittext |select @{Name = "Gpo Name" ;e = {$name}}, name, state, value }}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.DriveMapSettings.drive | select @{ name = "GPO" ;e = { $name}}, @{ name = "Letter" ;e = {$_.properties.Letter}}, @{ name = "Path" ;e = {$_.properties.path}}, @{ name = "Action" ;e = { $_.properties.action}}, @{ name = "ThisDrive";e = { $_.properties.ThisDrive}}, @{name = "Filtergroup" ;e = { $_.filters.filtergroup.bool}}, @{ name = "Group"; e = {$_.filters.filtergroup.name}} } | ft
$gpo.report.GPO |foreach-object {$name = $_.name; $_.SecurityDescriptor.Permissions.TrusteePermissions |select @{name = "Gpo name" ;e = {$name}},@{name = "Trustee" ;e = {$_.trustee.name."#text"}} , @{name = "Rights" ;e = {$_.standard.GPOGroupedAccessEnum}} } |sort Rights, "Gpo Name"
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.script |select-object  @{name = "GPOName" ;e = {$name}}, order, command, Parameters, RunOrder}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.extensiondata.extension.script |select-object  @{name = "GPOName" ;e = {$name}}, order, command, Parameters, RunOrder}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.extension.filesSettings.file.properties |select-object  @{name= "GPO Name";e= {$name}}, action, fromPath, targetPath}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.extension.ScheduledTasks.task.properties |select-object  name, appName, args, @{name = "Start hour" ; e = { $_.triggers.trigger.starthour}}, @{name = "Frequency" ; e = { $_.triggers.trigger.type } }, @{name = "Enddate" ; e = { $_.triggers.trigger.hasEndDate } }} | ft
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.msiapplication |select-object  @{name="Gpo name"; e= {$name}}, Name, Path}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.category -like "*Windows Update*"}| select-object  @{ name = "GPO"; e = { $name}}, name, state, @{name= "Wsus server" ; e= {($_.edittext | where-object {$_.name -like "Set the intranet update service for detecting updates:"}).value }}, @{name= "Wsus Stats" ; e= {($_.edittext | where-object {$_.name -like "Set the intranet statistics server:"}).value }}} |ft -AutoSize
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.name -like "*Windows Defender Firewall:*"}} | select-object @{name = "GPO" ;e ={ $name}},name, state
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.Extensiondata.extension.shortcutSettings.shortcut | foreach-object {$_.properties |select-object  @{name = "GPO Name" ; e = { $name}}, action , TargetPath, ShortcutPath}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.Extensiondata.extension.EnvironmentVariables.EnvironmentVariable |select-object @{Name = "GPO Name" ;e = {$name}}, status }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.Extension.Printers.sharedprinter|foreach-object {$desc = $_.desc; $_.properties |select-object  @{Name= "GPO Name";e={$name}}, Path, action, deleteAll, @{Name= "Description" ; e = { $desc}} }}|ft
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.Extension.PrinterConnection |select-object  @{name = "GPOName" ;e = {$Name}}, path }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.Computer.Extensiondata.Extension.Printers.portPrinter.Properties | select-object  @{name = "GPO Name" ;e = { $name}}, path, Ipaddress, action, deleteAll} |ft
$gpo.report.gpo |Foreach-object {$Name = $_.Name; $_ | select-object  @{Name = "GPO Name" ; e = {$name}},  @{name = "Count"; e= {([array] $_.linksto).count}} }  | sort count
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.ExtensionData.extension.DriveMapSettings.drive | select-object  @{name = "GPOName";e = {$name}}, @{name ="Letter";e = {$_.properties.letter}} , @{name ="Action";e = {$_.properties.Action}}, @{name ="Path"; e= { $_.properties.Path}}, @{name ="User"; e= { $_.filters.filteruser.name}}, @{name ="Group"; e= { $_.filters.filtergroup.name}}} |Format-Table
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.ExtensionData.extension.LocalUsersAndGroups.group.properties |foreach-object { $groupName = $_.groupName;  $_.members.member |select-object  @{Name= "GPO Name"; e = { $name}}, @{Name= "Group Name"; e = { $Groupname}}, name, action }}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.name -like "Turn off Windows Defender Antivirus"} |select @{name = "Gpo Name";e = {$name}}, name, state}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.category -like "Windows Components/Windows Defender/*"}| %{$category = $_.category ; $_.listbox.value.element | %{ $_ | select @{name = "Gpo Name";e = {$name}}, @{name = "Category"; e = {$Category}}, name, data}}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.category -like "Windows Components/Windows Defender/*"}| %{$category = $_.category.split('/')[-1] ; $_ |select @{name = "Gpo Name";e = {$name}}, @{name = "Category"; e = {$Category}}, name, state } }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.Computer.ExtensionData.extension.policy | where {$_.category -like "Windows Components/Remote Desktop Services/Remote Desktop Session Host/Licensing" } | % {$_.edittext} | select @{ name = "GPO" ;e = {$name}}, Name, State, Value}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.Computer.ExtensionData.extension.policy | where {$_.category -like "Windows Components/Remote Desktop Services/Remote Desktop Session Host/Session time limits" } | select @{ name = "GPO" ;e = {$name}}, name, state, @{name = "Value" ;e = {$_.DropDownList.value.name}}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.RegistrySetting} | WHERE {$_.KeyPath -LIKE "Software\Policies\Microsoft\Windows Defender*"} |%{$KeyPath = $_.KeyPath;  $_.VALUE |SELECT @{NAME = "GPO Name";e = { $name}}, @{name = "Description" ;e = {$keypath }} , name ,number}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.category -like "Windows Components/Remote Desktop Services*"}| select @{name = "GPO"; e= {$name}}, category, name, state,@{ name = "DropDownList" ;e = { $_.DropDownList.value.name}}}|fl
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.SecurityOptions | select @{name = "GPOName" ;e = {$Name}},@{name = "Display" ;e = {$_.display.name}},SystemAccessPolicyName,SettingString, SettingNumber, KeyName,@{name = "DisplayStrings" ;e = {$_.display.DisplayStrings.value}}, @{name =  "Units" ;e = {$_.display.Units}}, @{name = "DisplayNumber" ;e = {$_.display.DisplayNumber}}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.Extension.Printers.sharedprinter|foreach-object -Parallel { $name = $using:name; if ($_.properties.action -in @("R", "U","C")) {$server = $_.properties.path.split('\')[2] ; $print = $_.properties.path.split('\')[3] ; if (!(get-printer -ComputerName $server -Name $print -ErrorAction SilentlyContinue)) { $_ | select @{  name = "GPO" ;e = {$name}}, @{name = "Printer" ;e = {$_.properties.path}}, @{ name = "Group" ; e = {$_.filters.filtergroup.name}}  }}}} | ft -AutoSize
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.account  | select @{name = "GPOName" ;e = {$Name}}, name, type, SettingNumber, settingBoolean}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.UserRightsAssignment |select @{Name= "GpoName" ;e = {$name}}, name, @{name ="member";e = { $_.member.name."#text"}}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.AutoEnrollmentSettings | % { $EnrollCertificatesAutomatically = $_.EnrollCertificatesAutomatically; $ExpiryNotification = $_.ExpiryNotification; $_ | select @{Name= "GpoName" ;e = {$name}}, @{ name = "ExpiryNotify" ;e = {$ExpiryNotification}}, @{ name = "EnrollCertsAuto" ;e = { $EnrollCertificatesAutomatically}}, @{ name = "RenewUpdateRevoke" ;e= { $_.options.RenewUpdateRevoke}}, @{ name = "UpdateTemplates" ;e = { $_.options.UpdateTemplates  }}, @{name = "NotifyPercentPresent" ;e = {$_.NotifyPercent.present}}, @{name = "NotifyPercentvalue" ;e = {$_.NotifyPercent.value}}}} | ft
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.EFSRecoveryAgent | select @{Name= "GpoName" ;e = {$name}}, IssuedTo, IssuedBy, ExpirationDate, @{ name ="CertificatePurpose";e = {$_.CertificatePurpose.Purpose}} }
$gpo.report.gpo |foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy |where {$_.Category -like "LAPS"} |% { $_|select @{name = "GPO" ;e = {$name}}, name, state, @{name = "value";e = {$_.DropDownList.value.name}}, @{"name" = "LocalAdmin" ;e ={ $_.EditText.value}}}}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.RootCertificateSettings }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.eventlog | select @{Name= "GpoName" ;e = {$name}}, log, name, SettingNumber }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.user.Extensiondata.Extension.Printers.sharedprinter|foreach-object -Parallel { $name = $using:name; if ($_.properties.action -in @("R", "U","C")) {$server = $_.properties.path.split('\')[2] ; $print = $_.properties.path.split('\')[3] ; [int] $order = $_.GPOSettingOrder ;$disabled = $_.disabled; $group = $_.filters.filtergroup.name.replace('KRUGERINC\',"") ;if (!(get-printer -ComputerName $server -Name $print -ErrorAction SilentlyContinue)) { $_ | select @{  name = "GPO" ;e = {$name}}, @{name = "Printer" ;e = {$_.properties.path}}, @{name = "Order" ;e = {$order}}, @{ name = "Group" ; e = {$group}}, @{name = "Disabled";e= {$disabled}}, @{name = "GroupExist" ;e = {$result = try {get-adgroup $group} catch {}; if ($result) {$true} else {$false}}}}}}} | ft
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.ShortcutSettings.Shortcut | % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.Printers.sharedPrinter | % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.registrySettings.Registry | % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.computer.ExtensionData.extension.LocalUsersAndGroups.group.properties} |% { $object = $_.groupname; $_.members.member |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$_.name}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.DriveMapSettings.drive | % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.Computer.ExtensionData.extension.ShortcutSettings.Shortcut | % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.GPO |foreach-object {$name = $_.name; $_.User.ExtensionData.extension.FilesSettings.file| % {$object = $_.name; $_.filters.filtergroup |select @{name = "Server" ;e = {"GPO"}}, @{name = "Folder" ;e ={$name + "\" + $object}}, @{name = "IdentityReference" ;e = {$x = $_.name.split('\'); $x[0].toUpper() + '\' + $x[1]}}}}
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.name -like "Java permissions"} | select @{name = "GPO" ;e = {$name}}, name, state , @{name = "Value" ;e = {$_.DropDownList.value.name}}, @{ name = "category" ;e = {$_.category.split('/')[-1]}}} | ft
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.name -like "Automatic prompting for file downloads"} | select @{name = "GPO" ;e = {$name}}, name, state , @{name = "Value" ;e = {$_.DropDownList.value.name}}}
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.name -like "Use Pop-up Blocker"} | select @{name = "GPO" ;e = {$name}}, name, state }
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.name -like "Automatic prompting for file downloads"} | select @{name = "GPO" ;e = {$name}}, name, state }
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.name -like "Change the maximum number of connections per host (HTTP 1.1)"} | select @{name = "GPO" ;e = {$name}}, name, state, @{name = "Value" ;e = {$_.numeric.value}}}
$gpo.report.gpo |foreach-object {$name = $_.name; $_.user.extensiondata.extension.Policy | where {$_.Category -like "Windows Components/Internet Explorer/Security Features/AJAX"} | select @{name = "GPO" ;e = {$name}}, name, state, @{name = "Value" ;e = {$_.numeric.value}} }
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.name -like "Enable local admin password management"} |select @{name = "Gpo Name";e = {$name}}, name, state}
$gpo.report.gpo |Foreach-object {$name = $_.name; $_.computer.extensiondata.extension.policy | where-object {$_.name -like "Password"} |select @{name = "Gpo Name";e = {$name}}, name, state}


$a = $gpo.report.gpo | select name, @{ name = "UserEnabled" ;e = { $_.user.enabled}}, @{ name = "UserExtensiondata" ;e = { $_.user.extensiondata}},@{ name = "ComputerEnabled" ;e = { $_.computer.enabled}}, @{ name = "ComputerExtensiondata" ;e = { $_.Computer.extensiondata}}, linksto, securitydescriptor
($a | where {($_.UserEnabled -eq "false" -or $null -eq $_.UserExtensiondata  ) -and ($_.ComputerEnabled -eq "false" -or $null -eq $_.ComputerExtensiondata) -or ($null -eq $_.linksto) -or (  ($null -ne $_.linksto) -and ($_.linksto.enabled -contains $false) -and ($_.linksto.enabled -notcontains $true))} ) | ft
$a | where {($_.securitydescriptor.Permissions.TrusteePermissions.standard.GPOGroupedAccessEnum -notcontains "Apply Group Policy") -or (($_.UserEnabled -eq "false" -or $null -eq $_.UserExtensiondata  ) -and ($_.ComputerEnabled -eq "false" -or $null -eq $_.ComputerExtensiondata)) -or ($null -eq $_.linksto) -or (  ($null -ne $_.linksto) -and ($_.linksto.enabled -contains $false) -and ($_.linksto.enabled -notcontains $true))}  | select name, UserEnabled, UserExtensiondata, ComputerEnabled, ComputerExtensiondata, @{ name = "LinksToEnabled" ;e = {$_.linksto.enabled}},@{name = "AppliesToNull";e= {if ($_.securitydescriptor.Permissions.TrusteePermissions.standard.GPOGroupedAccessEnum -notcontains "Apply Group Policy") {"true"} else {"false"}}} | ft
$a = $gpo.report.gpo | select name, @{ name = "UserEnabled" ;e = { $_.user.enabled}}, @{ name = "UserExtensiondata" ;e = { if ($_.user.extensiondata) {$true} else {$false}}},@{ name = "ComputerEnabled" ;e = { $_.computer.enabled}}, @{ name = "ComputerExtensiondata" ;e = { if ($_.Computer.extensiondata) {$true} else {$false}}}, @{name = "linksCount";e = {$_.linksto.count}}, @{name = "linksAllDisabled";e = {$True -notin $_.linksto.enabled }}
$a | where {($_.UserEnabled -eq "false" -or $false -eq $_.UserExtensiondata  ) -and ($_.ComputerEnabled -eq $false -or $false -eq $_.ComputerExtensiondata) -or $_.linksCount -eq 0 -or $_.linksAllDisabled -eq $true }  | ft

get-dfsnRoot -Domain kruger.com |%{  Get-DfsnFolder -Path ($_.path + "\*") |%{ Get-DfsnFolderTarget -Path $_.path | where state -eq "offline" | select Path,TargetPath, State}} | ft -AutoSize
get-dfsnRoot -Domain kruger.com |%{  Get-DfsnFolder -Path ($_.path + "\*") |%{ Get-DfsnFolderTarget -Path $_.path | where state -eq "online" | select @{name ="DFS"; e = {$_.Path}}, @{name ="TargetPath"; e = { $_.TargetPath}}, @{ name = "Test" ;e = { Test-Path $_.TargetPath }}}} | ft -AutoSize

************************  Wins  ****************************
Works only in 32 bit version of Powershell
netsh wins server \\172.16.4.33 show database server=`{`}
***********  Modify TSHomeDirectory and TServicesProfilePath  ***************
function Modify-DirectoryObject {
param()
begin {$count=0}
process {
$objADSI = [ADSI]$_.Path
$objADSI.psbase.InvokeSet("TerminalServicesHomeDirectory", "")
$objADSI.psbase.InvokeSet("TerminalServicesProfilePath", "")
$objADSI.setinfo()
$count++
}
end {"objects were modified"}
}

********************************  Remove OU Protected  *******************************
set-adobject "OU=Armineh,OU=SrvcDsk,OU=Test,OU=__TOR,OU=Regular Users,OU=TOR,OU=Users,OU=Clients,OU=IC,DC=corp,DC=ivanhoecambridge,DC=com" -ProtectedFromAccidentalDeletion:$false

********************  ILO INFO *******************************
gwmi -Namespace root\hpq -Class hp_managementprocessor
************* Cluster ****************
gwmi -namespace "root\mscluster" -computername smtlfpcl02 MSCluster_NodeToActiveResource
****************  Connect to old AD **************************
import-module ActiveDirectory
New-PSDrive -Name OldAD -PSProvider ActiveDirectory -Root "DC=corp,DC=ivanhoecambridge,DC=com" -Server smtldcns02:389
$a= @{}
dir \\corp\nas\utilisateurs -Directory |% { $a[$_.basename] = (get-acl $_.fullname).access.IdentityReference  }
$a.keys |% { $value= $_;  $ok= $a[$_].value |% { $_ | where { $_ -like "AUTORITE NT\Système"  } };  if ($ok) {write-host -ForegroundColor Cyan $Value ; icacls \\corp\nas\Utilisateurs\$value /remove "AUTORITE NT\Système" /t}}
***********  Remove X400 adresses in Mail addresses  ********************
foreach ($mbx in (get-mailbox )){
$addrs = $mbx.emailaddresses |? {$_.prefixstring -ne "x400"}
set-mailbox $mbx -emailaddresses $addrs -whatif}
*********************  JDE Query *********************
start "https://smtlsqlrpt01/Reports/Pages/Report.aspx?ItemPath=%2fIT%2fCorporate+Applications%2fAD_Accounts_Validation"
***********************  DHCP Scope ***********************************
$a=netsh dhcp server \\smtldcns02 v4 show scope
$c = $a[5..($a.count - 4)] |% {$b=new-object System.Object ; $b | Add-Member -NotePropertyName Subnet -NotePropertyValue $_.substring(0, 16).trim() ;$b | Add-Member -NotePropertyName Mask –NotePropertyValue $_.substring(18,15).trim() ; $b | Add-Member -NotePropertyName State -NotePropertyValue $_.substring(34, 8).trim(); $b | Add-Member -NotePropertyName Name -NotePropertyValue $_.substring(43, 21).trim(); $b | Add-Member -NotePropertyName Comment -NotePropertyValue $_.substring(65, 14).trim(); $b }
$c
$dc ="smtldcns01","Smtldcns02","mvic06-wdc01","mvic06-wdc03"
$Dc |% { $server= $_ ;$a=netsh dhcp server \\$server v4 show scope 1;
$c = $a[5..($a.count - 4)] |% {$b=new-object System.Object ; $b | Add-Member -NotePropertyName Subnet -NotePropertyValue $_.substring(0, 16).trim() ;$b | Add-Member -NotePropertyName Mask -NotePropertyValue $_.substring(18,15).trim() ; $b | Add-Member -NotePropertyName State -NotePropertyValue $_.substring(34, 8).trim(); $b | Add-Member -NotePropertyName Name -NotePropertyValue $_.substring(43, 21).trim(); $b | Add-Member -NotePropertyName Comment -NotePropertyValue $_.substring(65, 14).trim(); $b | Add-Member -NotePropertyName Server -NotePropertyValue $server; $b }
New-Variable -Name $server -Value $c
}

******************  To title case ************************
$firstnameinput = (Get-Culture).TextInfo.ToTitleCase(((Read-Host " First name").ToLower()).ToString())
*************** Remove DFS link  ********************
dfsutil Target Remove \\corp\APPS\apps \\stordataprt01\apps\apps
   ************* DFS Import  *************
Dfsutil root import merge \\corp\temp\temp\ygermain\sitq-data.txt \\sitq.com\apps2

**********************  ACL access rules *********************
$acl = get-acl \\sdrpdataprt01\Legal
$acl.access[0] |% { $rule = New-Object System.Security.AccessControl.FileSystemAccessRule( "CORP\GS-SEC-ADRoleFilesAdmin", $_.FileSystemRights, $_.InheritanceFlags, $_.PropagationFlags,$_.AccessControlType) }
$acl.AddAccessRule($rule)
$acl.access | where identityreference -like "CORP\Domain admins" |% { $acl.RemoveAccessRule($_) }
Set-Acl -Path \\sdrpdataprt01\legal -AclObject $acl
******************  List vmware datastores  ***********************
get-datastore | where name -like "*prod*" |% {write-host -ForegroundColor Green $_.name ; New-PSDrive -Location $_ -Name ds -PSProvider VimDatastore -Root "\" ; cd ds:\ ; dir -Recurse  |where name -like "*.lck*"; c: ; remove-psdrive ds ; }
************************** Query Security event log *********************************
wevtutil qe Security /q:"*[System[Provider[@Name='Microsoft-Windows-Security-Auditing'] and (EventID=4757) or (EventID=4755)]]" /c:19 /f:text
********************** Mailbox disconnect ********************
Get-Mailboxdatabase | Clean-MailboxDatabase
Get-MailboxStatistics -server SMTLECMS01 | where { $_.DisconnectDate -ne $null } | select DisplayName,MailboxGuid,Database,DisconnectDate
****************
Add-Type -AssemblyName System.Web
$Encode = [System.Web.HttpUtility]::UrlEncode($URL)
(New-Object System.Uri 'C:\Program Files (x86)').AbsoluteUri
***************  Grab event log - Event Sink ******************
$query = "SELECT * FROM __instancecreationevent WHERE TargetInstance ISA 'Win32_NtLogEvent' and targetinstance.eventcode = '5136' and targetinstance.sourcename = 'Microsoft-Windows-Security-Auditing' and TargetInstance.Logfile = 'Security'
get-event |where {$_.SourceEventArgs.NewEvent.targetInstance.InsertionStrings[10] | select-string "group", "user"} |% {$_.SourceEventArgs.NewEvent.targetInstance.message}
********************  get list of consultant   ***********************
get-qaduser "*(Consultant)" |where parentcontainerdn -notlike "ou=Xuser*" |select name, office,creationdate ,description, @{name= "manager"; Expression={(get-qaduser $_.Manager).name }} |ft -auto |clip
************************** MAilbox Self *********************
get-Mailbox -server [servername] -ResultSize Unlimited | Add-ADPermission -User 'NT AUTHORITY\SELF' -ExtendedRights 'Send-as'
get-Mailbox -server [servername] -ResultSize Unlimited | Add-MailboxPermission -User 'NT AUTHORITY\SELF' -AccessRights FullAccess
******************  TMG ******************
$tmg = New-Object -comObject FPC.root
******************  IIS 6.0 *************
Get-WmiObject -Class IIsWebServerSetting -Namespace "root\microsoftiisv2" -ComputerName mvic06-wap01.sitq.com |select servercomment
********************  Add group to local group  ******************
$a |% { $GroupObj = [ADSI]"WinNT://$_/Administrators" ; $GroupObj.Add("WinNT://corp/LS-SEC-ADRole_DELEGATION_LOC_ADM_Servers")}
********************  get random password  **************************
$password = [string](get-random -InputObject ('!@#$%&*"').tochararray()) + (-join (Get-random -InputObject ('the quick brown fox jumps over the lazy dog').replace(" ","").ToCharArray() -count 6) ) + ( get-random -max 10)
$randomObj = New-Object System.Random
$NewPassword=""
1..25 | ForEach { $NewPassword = $NewPassword + [char]$randomObj.next(33,126) }
$NewPassword
***********************  Check TCP port  ******************************
dnscmd smtldcns01 /enumrecords ivanhoecambridge.com `@  |select-string " A`t" |% { $ok, $scrap ,$scrap, $ip= $_.tostring().split();  if (!( test-connection $ok -Count 1 -quiet)) {write-host -ForegroundColor Green $ok ; $tcp = New-Object System.Net.Sockets.TcpClient ; $tcp.Connect($ok, 443);  if ($tcp.Connected) {"YES"}; $tcp.Close() }}
************************  SAN SSSU.exe ***************************
C:\Program Files (x86)\Hewlett-Packard\Sanworks\Element Manager for StorageWorks HSV\sssu.exe "SELECT MANAGER SPPTOREVA01 USERNAME=corp\adm1nyg PASSWORD=*******" "select system TOREVA4400-01" "capture configuration TOREVA4400.txt"
*****************  WWname  ****************************
gwmi -ComputerName SMTLSHPPRE01 -Namespace root\wmi -Class MSFC_FCAdapterHBAAttributes |% {(($_.NodeWWN) | ForEach-Object {"{0:x2}" -f $_}) -join ":"}
50:6:b:0:0:c2:7a:21
50:6:b:0:0:c2:7a:23
 *****************  WWname on Vmware  ****************************
Get-VMhost * | Get-VMHostHBA -Type FibreChannel | Select VMHost,Device,@{N="WWN";E={"{0:X}" -f $_.PortWorldWideName}} | Sort VMhost,Device
*****************  Delete Reverse DNS records ********************
$a |% { $name, $life, $type, $ip = $_.split(" ",[System.StringSplitOptions]::RemoveEmptyEntries) ; $name =$name + ".sitq.com" ; $1,$2,$3, $scrap =  $ip.split(".");  dnscmd MVIC06-WDC01 /recordDelete "$3.$2.$1.in-addr.arpa." $scrap PTR $IP  /f}
**********************  Operations Manager ****************************
Add-PSSnapin Microsoft.EnterpriseManagement.OperationsManager.Client
New-ManagementGroupConnection -ConnectionString:smtlscom01
Set-Location ‘OperationsManagerMonitoring::’
$agent =Get-Agent
$agent |where name -like "storxa02.corp.ivanhoecambridge.com" | uninstall-agent
*****************  SCCM  *****************************
import-module "C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\ConfigurationManager.psd1"
cd cdp:
Set-CMQueryResultMaximum 3000
********************* Remote Registry ********************
$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $computer1)
$RegKey= $Reg.OpenSubKey("SOFTWARE\\Veritas\\NetBackup\\CurrentVersion")
$NetbackupVersion1 = $RegKey.GetValue("PackageVersion")
*****************************  Reset AdminCount  **********************************
$da= Get-QADGroupMember "domain admins"
$A = get-qaduser -SearchRoot "OU=AdminAccounts,OU=Security,OU=CORP,DC=corp,DC=ivanhoecambridge,DC=com" -IncludeAllProperties | where admincount -eq 1
Diff $A.dn $da.dn | where sideIndicator -like "<=" |% { set-qadobject $_.InputObject -ObjectAttributes @{admincount= ''}}
Diff $A.dn $da.dn | where sideIndicator -like "<=" |% { dsacls $_.InputObject /resetDefaultDACL}
**********************  Password *****************
(get-qaduser -SizeLimit 0 -SearchRoot "OU=User,OU=Accounts,OU=CORP,DC=corp,DC=ivanhoecambridge,DC=com" | where {$_.accountisdisabled -like $false -And $_.passwordlastSet -lt ([datetime] "2014-11-06") -and $_.passwordNeverExpires -like $false} |select name , passwordlastset, usermustchangepassword, title, office,creationDate |ft -AutoSize).count
***************************  Nmap  ***********************
for ($i=0; $i -lt 1100; $i=$i +100){ $i |% { start-job -name "scan$i"  -ArgumentList $a,$i -ScriptBlock {$a =$args[0]; $i =$args[1]; $a[$i..($i+ 100)] |% {if ( &"C:\Program Files (x86)\Windows Resource Kits\tools\nmap-6.46\nmap.exe" $_ -Pn --top-ports 60 --unprivileged |select-string "All 60 scanned ports on") {"$_ no good"} else {$_ "t:\ygermain\scrap$i.txt" }}}}}
***************************** ADFS federation ***********************
Enter-PSSession -ComputerName SPVCDPADFS01
Add-PSSnapin Microsoft.Adfs.PowerShell -PassThru
(Get-ADFSClaimDescription).count
***********************  wEB sITES ************************
$sites= dnscmd smtldcns01 /enumrecords ivanhoecambridge.com `@ /type A | where {($_ | select-string -NotMatch "@","Enregistrements renvoyés:","La commande s'est terminée correctement.","CIL") -and $_ -notlike "" } |% { $x=$_.split(); if ($x[0] -like "") {$computer =$old} else {$computer =$x[0]} ; $ip =$x[$x.count -1] ; $old = $computer; $os = (gwmi Win32_OperatingSystem -ComputerName $computer).caption ;$b=new-object System.Object ; $b | Add-Member -NotePropertyName Computer -NotePropertyValue $computer ; $b | Add-Member -NotePropertyName IP -NotePropertyValue $ip ; $b | Add-Member -NotePropertyName OS -NotePropertyValue $OS ; $b}
$sites | where {$_.os -like "*2012*" -or $_.os -like "*2008*" }|% {$server=$_.server; write-host -ForegroundColor cyan $_; Get-WmiObject -computername $server -authentication 6 -Class IIsWebServerSetting -Namespace "root\microsoftiisv2" } |% { $server.padright(40) + $_.ServerComment.padright(60)+ (  $_.ServerBindings |%{$_.hostname + "`t" + $_.ip + "`t" + $_.Port }) }
***************** ISS configuration for Windows 2003 ************************
$A = Get-QADComputer -SizeLimit 0 | where operatingsystem -like "*2003*"
$a += Get-QADComputer -SizeLimit 0 -service sitq | where operatingsystem -like "*2003*"
$www =$A |% { if (Get-Service -ComputerName $_.name  w3svc) {$_.name} }
$b=@{}
$www |% {$server= $_ ; $b = Get-wmiobject -computername $SERVER -class "IISWebServerSetting"  -namespace "root/MicrosoftIISv2"; $b |% { $all = $_ ; ($_.serverbindings |% {$server + "`t" + $_.hostname + "`t" + $_.ip + "`t" + $_.port + "`t" + ($all |% { $_.name + "`t" + (Get-wmiobject -computername $SERVER  -namespace "root/MicrosoftIISv2" -class IIsWebServer |where name -like $_.name | % {$_.name  + "`t" +  $(if ($_.serverstate -eq 2) {"on" } else {"off" })  })}) + "`t" + $all.ServerComment + "`t" + $all.serverautostart }) }}
$all ="date","time","sitename","ip","csmethod","csuristem","csuriquery","port","username","cip","csUserAgent","scstatus","scsubstatus","scwin32status"
$aa=$www |% { dir "\\$_\ADMIN`$\system32\logfiles" | where {$_.name -like "*W3SVC*" }}
$aa |% {write-host -ForegroundColor Green $_.fullname ; dir $_.fullname | where lastwritetime -gt ([datetime] "2015/01/01") |% { gc $_.fullname |select-string -NotMatch "#" |% {$ok =  $_.tostring().split(" "); 0..13 |% { $b[$all[$_]] = $ok[$_] }; $b["username"] }} |group -NoElement}
$www |% {$server=$_; dir "\\$server\ADMIN`$\system32\logfiles" | where {$_.name -like "W3SVC*" } |% {dir $_.fullname | where lastwritetime -gt ([datetime] "2015/01/01") |% { gc $_.fullname |select-string -NotMatch "#" |% {$b =@{}; $ok =  $_.tostring().split(" "); 0..13 |% { $b[$all[$_]]= $ok[$_] }; $b["server"] = $server; $c += $b }}}}
"server`tFQDN`tIP`tPort`tVirtualDirectory`tState`tAlias`tStartUp`tVirtualPath`tAppPool" | Out-File t:\ygermain\test.csv -Encoding utf8 ;
$www |% {$server= $_ ; $b = Get-wmiobject -computername $SERVER -class "IISWebServerSetting"  -namespace "root/MicrosoftIISv2"; $b |% { $all = $_ ; ($_.serverbindings |% {$server + "`t" + $_.hostname + "`t" + $_.ip + "`t" + $_.port + "`t" + ($all |% { $_.name + "`t" + (Get-wmiobject -computername $SERVER  -namespace "root/MicrosoftIISv2" -class IIsWebServer |where name -like $_.name | % {$(if ($_.serverstate -eq 2) {$state = "on" } else { $state = "off" }; $state)  })}) + "`t" + $all.ServerComment + "`t" + $all.serverautostart }) ; Get-wmiobject -computername $server -namespace "root/MicrosoftIISv2" -class IIsWebVirtualDirSetting |where  name -like ($_.name + "*") |%{ $_.pscomputername + "`t`t`t`t" + $_.name + "`t" + $state + "`t" +$_.AppFriendlyName + "`t`t" + $_.Path + "`t" + $_.AppPoolId  } }} | Out-File t:\ygermain\test.csv -Encoding utf8 -Append

****************************  instant Snapshot **********************
Invoke-Command -ComputerName smtldcns02 -ScriptBlock {C:\users\ygermain\documents\scripts\Snapshot.ps1}
********************  list all SQL database *************************
"MVIC06-WSQLSTAG" |% { Get-WmiObject  -ComputerName $_ Win32_PerfFormattedData_MSSQLSERVER_SQLServerDatabases |select pscomputername, name } | Ft -AutoSize
&"C:\Program Files (x86)\Log Parser 2.2\LogParser.exe" "SELECT  cs-username, COUNT(*) FROM '\\smtlsqlbo01\ADMIN$\system32\logfiles\W3SVC1\ex1502*.log' group by cs-username"

$AA |% { $_.fullname ; &"C:\Program Files (x86)\Log Parser 2.2\LogParser.exe"  ("`"SELECT cs-username, COUNT(*) FROM '"  + $_.fullname + "\ex150*.log'" + " group by cs-username" )}
[System.Reflection.Assembly]::LoadWithPartialName(  "Microsoft.SqlServer.Smo")
$MySQLObject =  new-object Microsoft.SqlServer.Management.Smo.Server "MVIC06-WSQLSTAG";
******************** Long file names  *************************
[System.IO.Directory]::GetFiles("c:\windows")
You can list long paths using the \\?\c:\ syntax in cmd.exe!
dir \\?\c:\ /s
PowerShell and cmd.exe:
$foldernames=cmd /c 'dir \\?\c:\ /s /ad |findstr "\\\\?\\"'
**********************  Open files *****************************

$Server = [adsi]"WinNT://($ComputerName)/LanmanServer"
$Resources = $Server.PSBase.Invoke("Resources")
$UserResource = foreach ($resource in $resources){ New-Object -TypeName PSobject -Property @{ User = $Resource.GetType().InvokeMember("User","GetProperty",$null,$Resource,$null); Path = $Resource.GetType().InvokeMember("Path","GetProperty",$null,$Resource,$null); LockCount = $Resource.GetType().InvokeMember("LockCount","GetProperty",$null,$Resource,$null) }
$user
**************  uNIX BASIC COMMAND ****************
SPACDPNAS01-1# ls -all | grep Scan | awk '{print $5,$4}'
**************  Set permissions on DNS reverse zones   *************************
( get-qadobject -SearchRoot "cn=MicrosoftDns,dc=DomainDnsZones,dc=corp,dc=ivanhoecambridge,dc=com" -SizeLimit 0 | where type -like "dnsZone") | % {$_;  add-QADPermission $_.dn -Account corp\dnsadmins -Rights GenericAll -ApplyTo All }
************** Exchange Online  ********************************
https://exch2013/ecp?ExchClientVer=15
Set-clientaccessServer AutodiscoverServiceInternalUri https://autodiscover.contoso.com/Autodiscover/Autodiscover.xml
$creds= get-credential
$session = new-pssession -ConfigurationName Microsoft.Exchage -ConnectionUri https://ps.outlook.com/powershell -Credential $creds -Authentication Basic -AllowRedirection

Get-CimInstance -ClassName win32_group -Filter "name = 'administrators'" | Get-CimAssociatedInstance -Association win32_groupuser
******************   In PowerShell V2 try this **********************
$query = "ASSOCIATORS OF {Win32_Group.Domain='$($env:COMPUTERNAME)',Name='Administrators'} WHERE ResultClass = Win32_UserAccount"
Get-WmiObject -Query $query | Select -ExpandProperty Caption

gc NovellLoginscript.txt | select-string '"%<NET_ADD>"',"REM" |select-string -notmatch " or "," AND " |% { if ($_ -match "REM") {$_ } else {$line = $_.tostring() ;$line; $hex =  $line.substring($line.indexof('=' ) + 3, $line.lastindexof('"') - $($line.indexof('=' ) + 3)) ; $arr= $hex.ToCharArray() ;[string]::Join( ".", $(for ($i= 0 ; $i -lt $arr.length; $i = $i + 2 ) { [string]::join("",$arr[$i..($i+1)])  |% { [convert]::ToInt16($_,16) }}))}}

************ Local users last login  ********************
$adsi = [ADSI]"WinNT://$env:COMPUTERNAME"
$adsi.Children | where {$_.SchemaClassName -eq 'user'} | ft name,lastlogin
name             lastlogin
----             ---------
{Administrator}  {7/26/2012 2:22:17 AM}

New-PSDrive -Name HKU   -PSProvider Registry -Root Registry::HKEY_USERS
{ASPNET}
{DefaultAccount}
{Guest}
{HomeGroupUser$}
{Sue}
{Yves}           {12/2/2015 11:35:52 PM}
$adsi = [ADSI]"WinNT://$env:COMPUTERNAME"
$adsi.Children | where {$_.SchemaClassName -eq 'user' -and $_.Lastlogin.GetType().name -notlike "PSMethod" } |select name, lastlogin
"`r`n" is CTLF
**********  Sort IP addresses *************
function IP-toINT64 () {
  param ($ip)

  $octets = $ip.split(".")
  return [int64]([int64]$octets[0]*16777216 +[int64]$octets[1]*65536 +[int64]$octets[2]*256 +[int64]$octets[3])
}

function INT64-toIP() {
  param ([int64]$int)

  return (([math]::truncate($int/16777216)).tostring()+"."+([math]::truncate(($int%16777216)/65536)).tostring()+"."+([math]::truncate(($int%65536)/256)).tostring()+"."+([math]::truncate($int%256)).tostring() )
}
$ip = "10.66.100.1", "10.66.100.11", "10.66.100.12", "10.66.100.13", "10.66.100.131", "10.66.100.144", "10.66.100.146", "10.66.100.15", "10.66.100.166", "10.66.100.175", "10.66.100.182", "10.66.100.203", "10.66.100.21", "10.66.100.212", "10.66.10.225", "10.66.100.33", "10.66.100.34"
[string[]] [system.version[]]( $ip) |sort
***************  Group membership from
$ARR = ([System.Security.Principal.WindowsIdentity]::GetCurrent().Groups.Translate([System.Security.Principal.NTAccount]))

*********************  work flow  ***********************
workflow paralleltest {
parallel {
	  Get-CimInstance -ClassName Win32_OperatingSystem
   	  Get-Process -Name PowerShell*
	  Get-CimInstance -ClassName Win32_ComputerSystem
	  Get-Service -Name s*
	 }
			}

************************  Signing scripts  ********************************
$cert = New-SelfSignedCertificate -KeyDescription "Yves code signing cert" -Type CodeSigningCert -Subject "Yves's codesigning certificate"
$cert = dir | where subject -like "CN=Yves's codesigning certificate"
Set-AuthenticodeSignature -FilePath c:\scripts\AirCanada\Scripts\Novell2.ps1 -Certificate $cert
************************ Run remote commands **********************
$session = new-pssession -computerName DC
import-pssession -module ActiveDirectory -prefix Remote -session $session
Get-CimInstance -ClassName Win32_volume -Shallow |select DriveLetter, @{name = "freeGB" ; Expression= {$_.freespace /1gb -as [int] }
winmgmt /verifyrepository
*********  Convert Hex to decimal ***************
$a = "ac","1b","0c","97"
$A |% { [Convert]::ToInt32($_,16)}
************  Validateset  *************
[Validateset("A","B","C")][string] $A
[ipaddress] $x = "192.13.32.4"
***********  Hash Table made easy ***********
$prop =[ordered] @{Computername= "dc"
'OS name' = $os.caption
'OS build' = $os.buildnumber
'FreeSpace' = $disk.freeSpace / 1gb -as [int]}
$obj = new-object -typename Psobject -property $prop
*********Create empty zip file  ******************
set-content $zipfilename ("PK" + [char]5 + [char]6 + ("$([char]0)" * 18))
*****************  Save Variable to a file for later ********************
$foo | Export-CliXml foo.xml
$foo = Import-CliXml foo.xml
***************  To see a bunch of info about he machine, etc. ********
MSinfo32.exe
import-module Powershell CookBook
Show-object $a
***************************
$other = Get-DfsnFolder \\ca\shared\* |% {$_.path}
Get-DfsnRoot -Domain lacoop.coop |%{  Get-DfsnFolder -Path ($_.path + "\*") |%{ Get-DfsnFolderTarget -Path $_.path } }
foreach ( $job in $other) {$_; start-job -name $job -ArgumentList $job -ScriptBlock {dir $args -Recurse -Directory |% {$folder=$_.fullname; get-acl $folder |%  {$access= $_.Access; If (($access|% {$_.isinherited }) -like $false ) {$folder} ; $access| where {$_.isinherited -like $false }| % {"`t" + $_.IdentityReference.tostring()  + "`t" + $_.filesystemrights.tostring() + "`t" + $_.AccessControlType.tostring()  + "`t" + $_.PropagationFlags.tostring() + "`t" + $_.IsInherited.tostring()  + "`t" + $_.InheritanceFlags.tostring()}}} >> ("c:\users\ygermain_sa\documents\ntfs\" + $args.replace('\\CA\Shared\',"") + ".txt")}}
get-mailbox -resultsize unlimited -Server MTPRVEXC02 |% { get-mailboxpermission $_ }  |where { $_.isinherited -like $false} |  % {$_.Identity.name; "`t" + $_.user + "`t" + $_.accessrights + "`t" + $(if ($_.deny) {"deny"} else {"allow"}) }>> c:\users\ygermain_sa\Documents\ntfs\MTPRVEXC02.txt
get-mailbox -resultsize unlimited -Server VIGPRDEXC01 |% { get-mailboxpermission $_ }  |where { $_.isinherited -like $false} |  % {$_.Identity.name; "`t" + $_.user + "`t" + $_.accessrights + "`t" + $(if ($_.deny) {"deny"} else {"allow"}) }>> c:\users\ygermain_sa\Documents\ntfs\VIGPRDEXC01.txt
import-module groupPolicy
get-gpo -All|% { $folder= $_.displayname; Get-GPPermissions -all  $_.displayname |% {$folder; "`t" + $_.trustee.domain + '\' + $_.Trustee.name + "`t" + $_.Permission + "`tallow"  }} | out-file c:\users\ygermain\Documents\ntfs\gpo.txt

start-job -name dfs -ScriptBlock {"folder`tgroup`trights" >C:\users\ygermain_sa\documents\ntfs\dfs.txt;
dfsutil /domain:corp /view  | where { $_ | select-string "`t`t*"} |% {$root= $_.trim(); dfsutil /root:corp\$root /view | where { $_ -like "`tLink name*"} |% {$scrap, $target, $scrap = $_.split('"') ; dfsutil property acl "\\corp\$root\$target" |where {$_ -like "*:*"} |% {$scrap = $_.split(":\"); "\\corp\$root\$target" + "`t" +  $scrap[$scrap.length -2 ] + "`t" + "(DFS) " + $scrap[$scrap.length -1 ].replace("(","").replace(")","")}}}C:\users\ygermain_sa\documents\ntfs\dfs.txt}
Get-GPOReport -All -ReportType Xml -Path C:\users\ygermain_sa\Documents\gpo\gporeport.xml
[xml] $map= gc C:\users\ygermain_sa\Documents\gpo\gporeport.xml
***************  Cleanup dfsr conflict folder *****************
gwmi -Namespace root\microsoftdfs dfsrreplicatedfolderconfig  |select replicatedfolderguid,replicatedfoldername
gwmi -Namespace root\microsoftdfs dfsrreplicatedfolderconfig  |where replicatedfolderguid -like 'A905A4B8-F993-40CD-9F2A-082FE4A76EF0'
(gwmi -Namespace root\microsoftdfs DfsrReplicatedFolderInfo | where replicatedfolderguid -like '36906AC8-E82C-4C3B-9AB7-466404BB3E99').CleanupConflictdirectory()
****************  List all members of groups through GPOs  ***************************
Get-GPOReport -All -ReportType Xml -Path C:\users\ygermain_sa\Documents\gporeport.xml
[xml] $gpo = gc C:\users\ygermain_sa\Documents\gporeport.xml
$gpo.report.GPO | % {$name = $_.name ; $LinksTo= $_.LinksTo.SOMPath; if($_.computer.extensiondata.name -like "Local Users and Groups") {write-host -ForegroundColor green $name ;"Attached to OU(s):"; $LinksTo; $_.computer.extensiondata |% {$_.extension.LocalUsersAndGroups |% {$i = 1; $_.group |% { $_.name; $i++ ; $_.properties |% {"deleteAllGroups: " + $_.deleteAllGroups ;$_.members |% {$_.member.name }}}}}}}
*********       Exporting SecureString from Plain text      **********
"P@ssword1" | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString | Out-File "C:\Temp\Password.txt"
*********       Exporting SecureString from Get-Credential  **********
(Get-Credential).Password | ConvertFrom-SecureString | Out-File "C:\Temp 2\Password.txt"
*********     Exporting SecureString from Read-Host  ***************
Read-Host "Enter Password" -AsSecureString |  ConvertFrom-SecureString | Out-File "C:\Temp 2\Password.txt"

$username = "admin@domain.com"
$password = ConvertTo-SecureString "mypassword" -AsPlainText -Force
$psCred = New-Object System.Management.Automation.PSCredential -ArgumentList ($username, $password)
$pscred = [pscredential]::new($username, $password)
[pscredential]$AzCred = New-Object System.Management.Automation.PSCredential( $UserName, $Password)
****************  [datetime]::FromFileTime($_.lastlogontimestamp).tostring( "yyyy-MM-dd") *************************
w32tm /ntte <number you want to convert>
*************** Workflow example   ********************************
workflow test-homefolder {   param([string[]] $ComputerName); foreach -parallel ($Computer in $Computername) {if (test-path $computer) {$computer} else {"$computer NO!"} } }
test-homefolder -ComputerName $a
********************  Scheduled tasks through COM  ************************
$TaskService = new-object -comobject "Schedule.Service"
$TaskService
$TaskService |gm
$TASK_STATE = @{0 = "Unknown"; 1 = "Disabled"; 2 = "Queued"; 3 = "Ready"; 4 = "Running"}
$ACTION_TYPE = @{0 = "Execute"; 5 = "COMhandler"; 6 = "Email"; 7 = "ShowMessage"}
$TaskService.Connect("mtcadc01", "Ygermain_sa", "ca", "*********")
******************  Confused PowerShell commands ********************
Microsoft.PowerShell.Core\get-job | where state -like completed |remove-job
*********************  list DHCP scope ***************************
import-module dhcpserver
Get-DhcpServerInDC |% {$name = $_.dnsname;  Get-DhcpServerv4Scope -ComputerName $name | % { $scopeID = $_.scopeID; $scopeName= $_.name ; $state = $_.state; $SubnetMask = $_.SubnetMask; Get-DhcpServerv4ScopeStatistics -ComputerName $name -ScopeId $scopeid | where inuse -eq 0 }} | select Scopeid, @{name ="SubnetMask" ; e={$SubnetMask}}, free, inuse, Reserved, Pending, @{name="Server" ; e={$name.split(".")[0]}}, @{name ="State" ; e={$State}}, @{name="Scope";e={$scopeName}} |ft -AutoSize
*************************  convert IP to address  ***************
function IP-toINT64 () {
param ($ip)

$octets = $ip.split(".")
return [int64]([int64]$octets[0]*16777216 +[int64]$octets[1]*65536 +[int64]$octets[2]*256 +[int64]$octets[3])
}

function INT64-toIP() {
param ([int64]$int)

return (([math]::truncate($int/16777216)).tostring()+"."+([math]::truncate(($int%16777216)/65536)).tostring()+"."+([math]::truncate(($int%65536)/256)).tostring()+"."+([math]::truncate($int%256)).tostring() )
}
********************* Concatenate a bunch of files *********************
gc File1.bin,File2.bin -Enc Byte -Read 512 | sc new.bin -Enc Byte
***************  get open sessions on a server  *************
get-smbsession -CimSession oak-fpserver1
**********************  GPO for LocalUsersAndGroups and Restricted Groups **********************************
$gpo.report.gpo |% { $name = $_.name; $links = $_.linksto; $_.COMPUTER.ExtensionData.Extension |% {  if ($_.LocalUsersAndGroups) {" ************ Local Users And Groups Policy "  +  $name + " ************"; $links|% {$_.sompath}; $_.LocalUsersAndGroups.group.properties |% { $_ |select deleteAll* , remove*, action; $_.groupname ; $_.members.member |% {"`t" + $_.name}}} ; if ( $_.RestrictedGroups){ " ================== Restricted Groups Policy " +  $name + " =================="; $links|% {$_.sompath} ;$_.RestrictedGroups |% { $_.groupname.name."#text"; if ($_.member) {$_.member |% {"`t" + "Has as member : " + $_.name."#text"}}; if ($_.memberOf ) {$_.memberof |% {"`t" + " member of " +  $_.name."#text"} }}}}}
*****************************
$b = get-adcomputer -filter {operatingsystem -like "*2012*"}
$s = new-pssession $b.name
Invoke-Command -Session $s -ScriptBlock {$ok = Get-ScheduledTask |where { $_.taskpath -like '\' -and $_.State -notlike "Disabled"  -and $_.principal.userid -like "CA\*" -and $_.triggers.Enabled -like "True" -and  $_.taskname -notlike "User_Feed_Synchronization*"} | select  @{name = "ComputerName";e={hostname}}, TaskName , @{name ="UserId" ;e={$_.principal.userid}}, @{name = "NextRunTime" ;e={(Get-ScheduledTaskinfo -TaskName $_.taskname).NextRunTime}}, @{name="Runs";e={$_.actions.execute }}, @{name="Args";e={$_.actions.arguments }} |ft -AutoSize;}  -AsJob
Invoke-Command -Session $s -ScriptBlock { Get-ScheduledTask |where { $_.taskpath -like '\' -and $_.State -notlike "Disabled"  -and $_.principal.userid -like "CA\*" -and $_.triggers.Enabled -like "True" -and  $_.taskname -notlike "User_Feed_Synchronization*"} | %{ $env:COMPUTERNAME +"`t" +$_.TaskName + "`t" + $_.principal.userid +"`t" + ((Get-ScheduledTaskinfo -TaskName $_.taskname).NextRunTime) + "`t" +  $_.actions.execute + "`t" + $_
.actions.arguments}} -AsJob
********************* Turn Windows 2008 scheduled tasks into PowerShell Objects ***********************
$b = get-adcomputer -filter {operatingsystem -like "*2008*"}
$a =$b | % { if (test-connection $_.name -Count 1 -ErrorAction SilentlyContinue ) {$_}}
$s = new-pssession $a.name
remove-variable x, d
$d = @();
$x = New-Object -TypeName psobject
$d = $a[1..$A.COUNT] |% {
                   if ($_ -LIKE "")
                       {$x ;
                        remove-variable x;
                        $x = New-Object -TypeName psobject
                        } ELSE {
                                 if ($_ -notlike 'Folder:*'){
                                         $name= $_.substring(0,37).trim().replace(":","").replace(" ","") ;
                                            if ( $_.length -gt 37)  {
                                                  $value = $_.substring(37, ($_.length -37)).trim()
                                                                    }
                                                              }  else { $name = "Folder" ;
                                                             $value = $_.split(":")[1].trim()
                                                                       }
                                    $x | add-member -notepropertyname $name -notepropertyvalue $value -force
                                }
                    }
$gpo.report.gpo |% {$name=$_.name;  $_.user.Extensiondata|where {$_.name -like "Printers" } |% {write-host -f green $name; $_.extension.printers |% {$_.shared
printer |% {If ($_.disabled -like "1") {write-warning $_.properties.path} else {write-host -f cyan $_.properties.path $_.properties.action }; if ($_.properties.action -no
tlike "D" ) {$ok = ($_.properties.path).split('\'); if (!(gwmi win32_share -Computer $ok[2] | where name -like $ok[3] -ErrorAction SilentlyContinue)) { $_.properties.path
 + " is dead!"} }; if ($_.filters.filtergroup) {$_.filters.filtergroup | % {$_.name ; get-qadgroup $_.name}} }}}}
**************************  Document DB  ***************************
<#
.Synopsis
   Query a MongoDB database (also known as DocumentDB on Azure)
.DESCRIPTION
   Query a MongoDB database which has a list of all security ACLs on file servers
.EXAMPLE
    Query-Mongo with no parameters will dump all the data
PS C:\> Query-Mongo
Name             Value
----             -----
_id              5734cd8e04a9ae1468a78e68
rights           268435456
PropagationFlags inheritonly
group            creator owner
perms            allow
InheritanceFlags containerinherit, objectinherit
IsInherited      false
folder           \\aps-apsv8001\c$
_id              5734cd8e04a9ae1468a78e69
rights           fullcontrol
PropagationFlags none
group            nt authority\system
perms            allow
InheritanceFlags containerinherit, objectinherit
IsInherited      false
folder           \\aps-apsv8001\c$
.EXAMPLE
   Query-Mongo -group everyone |ft  group, folder, rights -AutoSize
.EXAMPLE
   Query-Mongo -group "ca\domain admins" -rights fullcontrol
.EXAMPLE
This example shows that by default if a string is not complete, you don't have to put a wildcard, it will find something matching the group "s-1-"
PS C:\> Query-Mongo -group 's-1-' -rights fullcontrol |ft  group, folder -AutoSize
group                                                           folder
-----                                                           ------
s-1-5-21-1056682003-1636111092-3498309884-1030                  \\mcktdcvs-fps\c$\program files\microsoft data protection manager\dpm\temp\mta
s-1-5-21-1056682003-1636111092-3498309884-500                   \\mcktdcvs-fps\c$\users\administrator
s-1-5-21-1056682003-1636111092-3498309884-500                   \\mcktdcvs-fps\c$\windows\system32\ias
s-1-5-21-1056682003-1636111092-3498309884-500                   \\mcktdcvs-fps\c$\windows\syswow64\ias
s-1-5-21-1192730381-543556180-3327244814-500                    \\dtppfs01\d$\management
s-1-5-21-1192730381-543556180-3327244814-500                    \\dtppfs01\d$\nexxdocwriter
s-1-5-21-1192730381-543556180-3327244814-500                    \\dtppfs01\d$\nexxsys-pharmaclik rx support\release documentation\alberta
s-1-5-21-1192730381-543556180-3327244814-500                    \\dtppfs01\d$\nexxsys-pharmaclik rx support\release documentation\newfoundland
s-1-5-21-1201169344-2398060984-3886144035-1157                  \\srv6\d$\pharmessor\administration essor\receptionniste\documents
#>
function Query-Mongo {
    Param
    (
        [string] $group,
        [string] $folder,
        [string] $rights,
        [ValidateSet("deny", "allow")]
        [string] $perms,
        [string] $InheritanceFlags,
        [ValidateSet("true", "false")]
        [string] $IsInherited
    )
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Bson.dll"
Add-Type -Path "c:\Program Files (x86)\MongoDB\CSharpDriver 1.7\MongoDB.Driver.dll"
$db = [MongoDB.Driver.MongoDatabase]::Create('mongodb://localhost/awesome?safe=true;slaveok=true')
$collection = $db['groups']
if ($group)  { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("group", "'  + $group.replace("\","\\").tolower() + '")'}
if ($folder) { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("folder", "' + $folder.replace("\","\\").replace("`$:\","\$\").tolower() + '" )' }
if ($rights) { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("rights", "' + $rights.tolower() + '")' }
if ($perms)  { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("perms", "'  + $perms.tolower() + '")' }
if ($InheritanceFlags) { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("InheritanceFlags","' + $InheritanceFlags.tolower() + '")' }
if ($IsInherited)  { [array] $query += '[MongoDB.Driver.Builders.Query]::matches("IsInherited","' + $IsInherited.tolower() + '")' }
if ($query.count -gt 1){ $queryStr= [string]::join(",",$query)
    $queryall=  [MongoDB.Driver.Builders.Query]::and( (invoke-expression $queryStr ))
$collection.find($queryall) |select @{name="group";e={ $_.item("group").value }},@{name="folder";e={ $_.item("folder").value }}, @{name="perms";e={ $_.item("perms").value }},@{name="InheritanceFlags";e={ $_.item("InheritanceFlags").value }} ,@{name="IsInherited";e={ $_.item("IsInherited").value }} ,@{name="rights";e={ $_.item("rights").value }}
} else { if ($query.count -eq 1){
        $collection.find([MongoDB.Driver.Builders.Query]::matches((invoke-expression $query[0]).name, (invoke-expression $query[0]).value)) |select @{name="group";e={ $_.item("group").value }},@{name="folder";e={ $_.item("folder").value }}, @{name="perms";e={ $_.item("perms").value }},@{name="InheritanceFlags";e={ $_.item("InheritanceFlags").value }} ,@{name="IsInherited";e={ $_.item("IsInherited").value }} ,@{name="rights";e={ $_.item("rights").value }}
        }
        else {$collection.FindAll()}
        }
}

$psise.Options.ErrorForegroundColor = [System.Windows.Media.Colors]::Chartreuse
notepad $profile.CurrentUserCurrentHost
 gwmi win32_volume |% { ($_.capacity / 1gb).tostring("F1")}

************************  Get azure sql database connectionstrings  **************************
(Get-AzSqlDatabaseSecureConnectionPolicy  -ServerName appsinterne-devopsbdserver -ResourceGroupName AppInterneDevOps -DatabaseName AppsInternebddev).connectionstrings

# ********************  Assign Connection String to Connection String   *********************
Set-AzWebApp -ConnectionStrings @{ MyConnectionString = @{ Type="SQLAzure"; Value ="Server=tcp:$ServerName.database.windows.net;Database=MySampleDatabase;User ID=$Username@$ServerName;Password=$password;Trusted_Connection=False;Encrypt=True;" } } -Name $AppName -ResourceGroupName $ResourceGroup

jdbc:sqlserver://appsinterne-devopsbdserver.database.windows.net:1433;database=AppsInternebddev;user=ateam@appsinterne-devopsbdserver;password=P@sswDevops1;encrypt=true;hostNameInCertificate=*.database.secure.windows.net;loginTimeout=30;
@{ MyConnectionString = @{ 	Type="SQLAzure";
				Value ="Server=tcp:appsinterne-devopsbdserver.database.windows.net;
				Database=AppsInternebddev;
				User ID=ateam@appsinterne-devopsbdserver;
				Password=P@sswDevops1;
				Trusted_Connection=False;
				Encrypt=True;"
			}


cd \soquij
C:\soquij>git clone http://srvtfs01:8080/tfs/SOQUIJ/GuichetUnique/_git/SQL/install
C:\soquij>git pull

/SOQUIJ/GuichetUnique/_git/SQL/install

cd \templates\devops
git add "AppsInternesPrd"
git commit -m "Template pour App Internes Prod"
git push
git push --mirror https://srvdevops.soquij.local/ATeam/Guichet%20Unique/_git/ControleQualite
PS C:\az\devops 5:14:09> git push --mirror https://github.com/yvesgermain/az.git
******************  Find storage for a web app plan  *****************************
PS C:\temp\AppSatellite>  Get-AzWebApp -name soquijgummaster-stg |% {$_.siteconfig.AppSettings}

Name                                       Value
----                                       -----
masterServerUrl                            https://soquijgummaster-stg.azurewebsites.net
serverRole                                 master
AzureBlobFileSystem.ConnectionString:media DefaultEndpointsProtocol=https;AccountName=soquijgummediastoragestg;AccountKey=AZkgedRwUenIsolQx58oULPbuCgLc/3...
AzureBlobFileSystem.RootUrl:media          https://soquijgummediastoragestg.blob.core.windows.net

************************  create a SQL serverless *********************
New-AzSqlDatabase `
  -ResourceGroupName $resourceGroupName `
  -ServerName $serverName `
  -DatabaseName $databaseName `
  -ComputeModel Serverless `
  -Edition GeneralPurpose `
  -ComputeGeneration Gen5 `
  -MinVcore 0.5 `
  -MaxVcore 2 `
  -AutoPauseDelayInMinutes 720

*******************  Telnet une page web si pas de CURL *****************
(curl -Uri gumwebapp.azurewebsites.net/).content
telnet google.ca 80
get / http/1.1

az rest -m get -u 'https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites?api-version=2016-08-01'

************************ whatsmyip.com ******************************
(Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
************************ Map drive to Azure file Share  ****************
$resourceGroupName = "<your-resource-group-name>"
$storageAccountName = "<your-storage-account-name>"
$fileShareName = "<your-file-share-name>"

# These commands require you to be logged into your Azure account, run Login-AzAccount if you haven't already logged in.
$storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroupName -Name $storageAccountName
$storageAccountKeys = Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageAccountName
$fileShare = Get-AzStorageShare -Context $storageAccount.Context | Where-Object {
    $_.Name -eq $fileShareName -and $_.IsSnapshot -eq $false
}
if ($fileShare -eq $null) {
    throw [System.Exception]::new("Azure file share not found")
}

# The value given to the root parameter of the New-PSDrive cmdlet is the host address for the storage account,
# <storage-account>.file.core.windows.net for Azure Public Regions. $fileShare.StorageUri.PrimaryUri.Host is
# used because non-Public Azure regions, such as sovereign clouds or Azure Stack deployments, will have different
# hosts for Azure file shares (and other storage resources).
$password = ConvertTo-SecureString -String $storageAccountKeys[0].Value -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential -ArgumentList "AZURE\$($storageAccount.StorageAccountName)", $password
New-PSDrive -Name <desired-drive-letter> -PSProvider FileSystem -Root "\\$($fileShare.StorageUri.PrimaryUri.Host)\$($fileShare.Name)" -Credential $credential -Persist

    "outputs": {
        "scrapola": {
            "type": "object",
            "value": "[reference(concat('Microsoft.Sql/servers/sqlgum-devops'), '2014-04-01', 'Full')]"
	}
****************  Connect to TFS  ***********************
Set-VSTeamAccount -Account http://srvtfs01:8080/tfs/soquij -UseWindowsAuthentication -verbose -drive tfs
Set-VSTeamDefaultProject -Project "GuichetUnique"
New-PSDrive -Name tfs -PSProvider SHiPS -Root 'VSTeam#VSTeamAccount'
"bgslsahh5cx6fdak6lvxnu5tg3nkxvamib3uo77qqe7hpjvysxdq"
Get-VSTeamReleaseDefinition -id 22

$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Authorization", "Basic OmJnc2xzYWhoNWN4NmZkYWs2bHZ4bnU1dGczbmt4dmFtaWIzdW83N3FxZTdocGp2eXN4ZHE=")

$response = Invoke-RestMethod 'http://srvtfs01:8080/tfs/soquij/_apis/projects?api-version=1.0' -Method 'GET' -Headers $headers -Body $body
$response | ConvertTo-Json

Set-VSTeamAccount -Account https://srvdevops.soquij.local/ateam -UseWindowsAuthentication -verbose -drive tfs
Set-VSTeamDefaultProject -Project "Guichet Unique"
New-PSDrive -Name tfs -PSProvider SHiPS -Root 'VSTeam#VSTeamAccount'
Get-VSTeamReleaseDefinition -id 4
$GuichetUnique = (curl -Uri (Get-VSTeamReleaseDefinition -id 4 ).url -UseDefaultCredentials).content | ConvertFrom-Json

Add-VSTeamRelease -DefinitionName "Guichet Unique-Devops" -Description Test -BuildNumber 2841

Set-VSTeamAccount -Account http://srvtfs01:8080/tfs/soquij -UseWindowsAuthentication -verbose
Set-VSTeamDefaultProject -Project GuichetUnique
Add-VSTeamRelease -DefinitionName "Guichet Unique-Devops" -Description Test -BuildNumber 2841
$id = (Get-VSTeamReleaseDefinition -ProjectName GuichetUnique | where {$_.name -like "Restore BD et Stockage"}).id
$b =  Get-VSTeamReleaseDefinition -ProjectName GuichetUnique -Id $id -Raw
$b.environments.variables.Destination.value = "devops"
$b.environments.variables.Storage.value = "storgum"
$b.environments.variables.Source.value = "dev"
$b.environments.variables.BD.value = "Gum"
$body = $b | ConvertTo-Json -Depth 100
$body | Out-File -FilePath c:\temp\scrap.json -Encoding utf8
update-VSTeamReleaseDefinition -InFile c:\temp\scrap.json -ProjectName GuichetUnique -Verbose
cd \templates\devops
git clone http://srvtfs01:8080/tfs/SOQUIJ/GuichetUnique/_git/DevOps/scripts
$BuildId = (git log --pretty=oneline -n1 scripts/ ).Substring(0,9)
Add-VSTeamRelease -ArtifactAlias devops -ProjectName guichetUnique -BuildId $BuildId

$d = (Get-VSTeamRelease -ProjectName guichetunique -top -1 | where {$_.definitionName -like "Infrastructure Azure Guichet Unique" } | % {Get-VSTeamRelease -ProjectName guichetunique -id $_.id | % {$def = $_; $_.Environments | % { if ($_.name -like "qa" -and  $_.status -like "Succeeded" -and ($def.artifacts.definitionReference.branch |% { $_.name -like "*master"})) {$def}}}})[0]

az webapp create-remote-connection --subscription <subscription-id> --resource-group <resource-group-name> -n <app-name> &

**************  Elastic search  *****************
cd c:\temp\elasticsearch\elasticsearch-7.3.2\bin
"node.name: yves01"> elasticsearch.yml
"cluster.name: elastic">> elasticsearch.yml
.\elasticsearch
curl -Uri http://localhost:9200
(curl -Uri http://localhost:9200 ).content
$json = (curl -Uri http://localhost:9200 ).content
$a = $json |convertfrom-json
$a.name
$a.cluster_name
$a.version
$a.tagline
curl -Uri 'http://localhost:9200/_cat/health?v&pretty'
(curl -Uri 'http://localhost:9200/_cat/nodes?v' ).content
$postParams = @{username='me';moredata='qwerty'}
$json = $postParams | ConvertTo-Json
curl -Method PUT "http://localhost:9200/products/mobiles/1?pretty" -Headers @{"Content-Type"="application/json"} -Body $json

curl -Method post "http://localhost:9200/products/mobiles/1/_update?pretty" -Headers @{"Content-Type"="application/json"} -Body '{ "doc": {"color" :"black" }}'
CURL -method PUT 'http://localhost:9200/products/mobiles/2?pretty'-Headers @{"Content-Type"="application/json"} -Body `
@"
{
  "name": "Samsung Galaxy",
  "camera": "8MP",
  "storage": "128GB",
  "display": "5.2inch",
  "battery": "1,500mAh",
  "reviews": ["Best Android phone", "I love it!"]
}
"@
******************************  Remove Storage Account Containers ******************
$storageAccount = Get-AzStorageAccount -ResourceGroupName appsinterne-rg-dev -Name storappsinternedev
Get-AzStorageContainer -Container bootdiagnostics-vmcrawl* -Context $storageAccount.context | Remove-AzStorageContainer -Confirm:$false -Force

$Dest = Get-AzStorageAccount -ResourceGroupName Infrastructure -Name gumbackups
$source = Get-AzStorageAccount -ResourceGroupName Storage-rg-prd -Name storappsinterneprd
New-AzStorageContainer -Name backup-guichetunique-dev -Context $Dest.Context
Get-AzStorageBlob -Container appsinterne -Context $source.Context | Start-AzStorageBlobCopy -DestContainer backup-appsinterne-prd -DestContext $Dest.Context
******************  -f operator with date  ****************************
$date = Get-date;  "{0:yyyyMMdd}" -f $date
*******************  Find real fast ****************
Where.exe node
You can also install the NuGet provider by running'
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
. Do you want PowerShellGet to install and import the NuGet provider now?
Set-PSRepository -Name psgallery -InstallationPolicy Trusted

(Get-Content ControleQualite.App.exe.config ).replace('gummaster-dev' , "gummaster-$environnement") | set-content .\ControleQualite.App.exe.config -Encoding UTF8

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-WebRequest -Uri https://gum-qa.azurewebsites.net/
**********************************
$rules = new-object 'System.Collections.Generic.List`1[Microsoft.Azure.Management.WebSites.Version2016_09_01.Models.RampUpRule]'
$rule = new-object Microsoft.Azure.Management.WebSites.Version2016_09_01.Models.RampUpRule
$rule.ChangeIntervalInMinutes =1
$rule.MinReroutePercentage = 1
$rule.MaxReroutePercentage = 50
$rule.Name = "Gum-devops-change"
$rule.ReroutePercentage = 50
$rule.ActionHostName = "gum-devops-stage.azurewebsites.net"
$rule.ChangeDecisionCallbackUrl = "http://gum-devops-stage.azurewebsites.net"

$rules.add($rule)
Set-azwebsite -name gum-devops -slot Production -routingrules $Rules
get-azwebapp | where {$_.kind -like "app"} |% { if ($_.defaulthostname -like "gumsolr-*") {$name = "https://" + $_.defaulthostname +"/solr/index/admin/ping"} {$name = "https://" + $_.defaulthostname} ; start-job  -Name $name -ScriptBlock {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; curl -Uri $args[0] -UseDefaultCredentials } -ArgumentList $Name}
get-azwebapp | where {$_.kind -like "app"} |% { get-azwebapp -name $_.name | select name, state, usagestate, @{name = "AppServicePlan";e = {$_.serverfarmID.split("/")[-1]}}, @{name = "Tier" ; e = {(get-azappserviceplan -name $_.serverfarmID.split("/")[-1]).sku.tier }}} |ft -AutoSize
foreach ( $slot in "stage", "hotfix") { Foreach ( $name in "gum-prd","gummaster-prd") { get-azwebappslot -name $name -ResourceGroupName gumsite-rg-prd -Slot $Slot | select  @{name = "Slot-name" ; e = {"$name-$slot"}}, state, usagestate}}

$a = Get-AzMetric  -ResourceId (Get-azwebapp -name "gum-dev").id -StartTime ( [datetime]::Today) -EndTime ([datetime]::now) -TimeGrain 00;01;00;
$a.data |select @{name = "Time" ;e = {$_.timestamp.ToLocalTime()}}, Total | ft -AutoSize

param(
        [Parameter(Mandatory = $True)]
        [string]
        [ValidateSet("dev", "qa", "prd", "devops")]
        $Environnement,
        [Parameter(Mandatory = $True)]
        [string]
        $DefaultWorkingDirectory
    )
    if ($env:COMPUTERNAME -like "srvtfs01") { . "$DefaultWorkingDirectory\DevOps\scripts\Functions.ps1" }  else { . C:\templates\DevOps\scripts\Functions.ps1 }

    # Debut du script
    $resourceGroupName = "gumsite-rg-$environnement"
    $webAppName = "gumsolr-$environnement"
    $kuduPath = "server/solr/"
    $kuduApiUrl = "https://gumsolr-$environnement.scm.azurewebsites.net/api/vfs/site/wwwroot/" + $kuduPath
    # $localPath = "C:\temp\solr_index_$Environnement\"

    # if (!(Test-Path $localPath)) { mkdir $localPath }
    $kuduApiAuthorisationToken = Get-KuduApiAuthorisationHeaderValue $resourceGroupName $webAppName

[array] $a = $kuduApiUrl;
$all = @()
$Folders = do {
    if ($all) {$A = $all}
    $A | ForEach-Object {
        $all += (Invoke-RestMethod -Uri $_ -Headers @{"Authorization" = $kuduApiAuthorisationToken; "If-Match" = "*" } -Method GET -ContentType "multipart/form-data" | ForEach-Object {
                $_ | where-object { $_.mime -like "inode/directory" } }).href ;
    }
    $all = $all | Sort-Object | get-unique ; $all
} while ((compare-object ( $all | Sort-Object | get-unique ) ($a | Sort-Object | get-unique )) -notlike $null )

$Folders = $folders | Where-Object { $_ -ne $null } | Sort-Object | get-unique
$Folders | foreach-object {
    $FolderPath = "C:\temp\logskudu\gumsolr" + "-" + $environnement + '\' + $_.replace( ("https://gumsolr-" + $Environnement + ".scm.azurewebsites.net/api/vfs/site/wwwroot/server/solr/") , "")
    if (!( Test-Path $FolderPath)) { mkdir $FolderPath -Force };
    $files = Invoke-RestMethod -Uri $_ `
        -Headers @{"Authorization" = $kuduApiAuthorisationToken; "If-Match" = "*" } `
        -Method get `
        -ContentType "multipart/form-data"
    $files | where-object { $_.mime -notlike "inode/directory" } | ForEach-Object {
        $FolderPath = "C:\temp\logskudu\gumsolr" + "-" + $environnement + '\' + $_.href.replace( ("https://gumsolr-" + $Environnement + ".scm.azurewebsites.net/api/vfs/site/wwwroot/server/solr/") , "").replace($_.name , "")
        $FilePath = $FolderPath + $_.name
        Invoke-RestMethod -Uri $_.href `
            -Headers @{"Authorization" = $kuduApiAuthorisationToken; "If-Match" = "*" } `
            -Method get `
            -OutFile $FilePath  `
            -ContentType "multipart/form-data" }
}

Invoke-RestMethod -Uri $kuduApiUrl `
        -Headers @{"Authorization" = $kuduApiAuthorisationToken; "If-Match" = "*" } `
        -Method get `
        -OutFile C:\temp\gumsolr-prd.zip `
        -ContentType "multipart/form-data"

**************  Filezilla  ***********************
foreach ($site in "gum-devops", "GumMaster-devops") {
[xml] $x = Get-AzWebAppPublishingProfile -Name $site -ResourceGroupName gum-rg-devops
$url =  $x.publishData.publishProfile.publishUrl[1].replace("ftp://","")
$password = $x.publishData.publishProfile.userPWD[0]
$username = $x.publishData.publishProfile.userName[1]
$line = "ftp://" + $username + ":" + $password + '@' + $url
& "C:\Program Files\FileZilla FTP Client\filezilla.exe" -a c:\temp\GuichetUnique.CMS.Umbraco\Content\C_C\agent\Win2016Agent2\_work\3\s\GuichetUnique.CMS\GuichetUnique.CMS.Umbraco\obj\Release\Package\PackageTmp  $line
wait
}
********* get-help about_environment_variable ******************
[Environment]::GetEnvironmentVariable('Path', 'user')
[Environment]::GetEnvironmentVariable('Path', 'machine')
***********  Secret In azure ***********************
@microsoft.KeyVault(SecretUri=https://gumkeyvault.vault.azure.net:443/secrets/Soquijadm/de13198b278e42d4a87e7cb443d2dd01)
**************  Stop anti-virus ****************
Set-mppreference -DisableIntrusionPreventionSystem
**************  Export sql database to CE version ************************
PS C:\scripts\exportsqlce40 10:54:08> .\Export2sqlce "server=sqlgum-prd.database.windows.net;database=BdGum-prd;user id=sqladminprd;password=Cohu3418" C:\temp\AW.sqlce

Deploy ZIP file
In the browser, navigate to https://<app_name>.scm.azurewebsites.net/ZipDeployUI.

***************************  Running Powershell as Administrator?   ****************************************
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
If ($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {$host.ui.rawui.windowtitle = "Administrateur: running as $env:username"}

foreach ( $job in $share) { $name = $job.replace('\\', "").replace('\', "_"); start-job -name $job -ArgumentList $job -ScriptBlock {$job = $args ; $name = $args.replace('\\', ""). replace('\', "_"); [array] $result= (get-acl $job).access | select-object @{name = "Share";e ={$job }}, IdentityReference, filesystemrights, AccessControlType, PropagationFlags, IsInherited, InheritanceFlags; dir $job -Recurse -Directory |% {$name = $job.replace('\\', "").replace('\', "_"); $folder=$_.fullname;  $result += get-acl $folder |%  {$access= $_.Access;  $access| where {$_.isinherited -like $false }| select-object @{name = "Share";e ={$folder}}, IdentityReference, filesystemrights, AccessControlType, PropagationFlags, IsInherited, InheritanceFlags}}; $result | ft -AutoSize >> ("c:\users\geryve-agr\documents\ntfs\" + $name + ".txt")}}
foreach ( $job in $share) { $name = $job.replace('\\', "").replace('\', "_"); start-job -name $job -ArgumentList $job -ScriptBlock {$job = $args ; $name = $args.replace('\\', ""). replace('\', "_"); [array] $result= (get-acl $job).access | select-object @{name = "Share";e ={$job }}, IdentityReference, filesystemrights, AccessControlType, PropagationFlags, IsInherited, InheritanceFlags; dir $job -Recurse -Directory |% {$name = $job.replace('\\', "").replace('\', "_"); $folder=$_.fullname;  $result += get-acl $folder |%  {$access= $_.Access;  $access| where {$_.isinherited -like $false }| select-object @{name = "Share";e ={$folder}}, IdentityReference, filesystemrights, AccessControlType, PropagationFlags, IsInherited, InheritanceFlags}}; $result | Export-Clixml C:\users\geryve-agr\Documents\ntfs\xml\$name.xml }}

Get-PnpDevice -class net | Where-Object Status -eq Unknown | Select-Object FriendlyName, InstanceId, @{name ="Computername"; e= {Hostname}}
set devmgr_show_nonpresent_devices=1
start devmgmt.msc

*****************  List all registry for installed software  ****************
$computername = "localHost"
# Branch of the Registry
$Branch='LocalMachine'

# Main Sub Branch you need to open
$SubBranch="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"

$registry=[microsoft.win32.registrykey]::OpenRemoteBaseKey('Localmachine',$computername)
$registrykey=$registry.OpenSubKey($Subbranch)
$SubKeys=$registrykey.GetSubKeyNames()

# Drill through each key from the list and pull out the value of
# “DisplayName” – Write to the Host console the name of the computer
# with the application beside it

Foreach ($key in $subkeys)
{
    $exactkey=$key
    $NewSubKey=$SubBranch+"\\"+$exactkey
    $ReadUninstall=$registry.OpenSubKey($NewSubKey)
    $Value=$ReadUninstall.GetValue("DisplayName")
    WRITE-HOST $computername, $Value

}
*******************  Query with azure graph  Fast and over Multiple subscriptions *************************
----------------- Case SENSITIVE  ----------------------------
Search-AzGraph -Include DisplayName -first 5000 -Query 'where type =~ "Microsoft.Network/networkInterfaces"' |where {$_.properties.ipConfigurations.properties.privateIPAddress -like "10.12[6,7].244*" } | select @{"name" = "virtualMachine";e = {$_.properties.virtualMachine.id.split("/")[-1] }} , @{"l"= "IP" ;e = {$_.properties.ipConfigurations.properties.privateIPAddress }}, subscriptionDisplayName
Search-AzGraph -first 1000 -Query "Resources | where type =~ 'microsoft.keyvault/vaults' and name like 'scaex' | project name"
Search-AzGraph -first 1000 -Query "Resources | where type =~ 'microsoft.web/sites'  | project name, kind, resourceGroup"
Search-AzGraph -first 1000 -Query "Resources | join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project Subscription=name, subscriptionId) on subscriptionId | where type =~ 'microsoft.web/sites' and kind like 'app' | project name, kind, resourceGroup, Subscription"
Search-AzGraph -first 1000 -Query "Resources | join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project Subscription=name, subscriptionId) on subscriptionId | where type =~ 'microsoft.network/virtualNetworks' | project name, subnets= (properties.subnets) , Subscription| mv-expand subnets | project name, subnetName = (subnets.name) , Subscription"
Search-AzGraph -first 1000 -Query "Resources | join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project Subscription=name, subscriptionId) on subscriptionId | where type =~ 'Microsoft.Storage/storageAccounts'| project name, kind, resourceGroup, Subscription, Access_Tier= (properties.accessTier), RBAC_enabled= (properties.azureFilesIdentityBasedAuthentication.directoryServiceOptions), AD= (properties.azureFilesIdentityBasedAuthentication.activeDirectoryProperties.domainName)" | ft
**************** locking your screen  ****************
rundll32.exe user32.dll,LockWorkStation
*********************  output net user  to file ************************
FOR /F "usebackq tokens=1,2,3 delims= " %i in (`net user`) do net user %i 2> nul | @findstr /c:"Global Group memberships" && do net user %j 2> nul | @findstr /c:"Global Group memberships" && do net user %k 2> nul | @findstr /c:"Global Group memberships"
*******************************  Find version Antivirus ***********************
if ( get-wmiobject -Namespace root/SecurityCenter2 -ClassName AntivirusProduct -list -erroraction silentlyContinue) {Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct}
if ( get-wmiobject -Namespace root/SecurityCenter1 -ClassName AntivirusProduct -list -erroraction silentlyContinue) {Get-CimInstance -Namespace root/SecurityCenter1 -ClassName AntivirusProduct}

$vms= Search-AzGraph -Include DisplayName -First 5000 -Query 'where type =~ "Microsoft.compute/virtualmachines"'  | Where {$_.properties.licenseType -eq "Windows_Server"} | select *
*************************** scheduled Task ***************************
$header = "HostName,TaskName,NextRunTime,Status,LogonMode,LastRunTime,LastResult,Author,TaskToRun,StartIn,Comment,ScheduledTaskState,IdleTime,PowerManagement,RunAsUser,DeleteTaskIfNotRescheduled,StopTaskIfRunsXHoursandXMins,Schedule,ScheduleType,StartTime,StartDate,EndDate,Days,Months,Repeat_Every,Repeat_Until_Time,Repeat_Until_Duration,Repeat_StopIfStillRunning"
$Sched = schtasks /paccads01  /query /fo csv /v /nh
$header > $env:temp\scrap.csv ; $Sched >> $env:temp\scrap.csv
$Schedtask = import-csv -Path  $env:temp\scrap.csv
Remove-Item $env:temp\scrap.csv
*************   User Account Control  *********************
Function DecodeUserAccountControl ([int]$UAC)
{
$UACPropertyFlags = @(
"SCRIPT",
"ACCOUNTDISABLE",
"RESERVED",
"HOMEDIR_REQUIRED",
"LOCKOUT",
"PASSWD_NOTREQD",
"PASSWD_CANT_CHANGE",
"ENCRYPTED_TEXT_PWD_ALLOWED",
"TEMP_DUPLICATE_ACCOUNT",
"NORMAL_ACCOUNT",
"RESERVED",
"INTERDOMAIN_TRUST_ACCOUNT",
"WORKSTATION_TRUST_ACCOUNT",
"SERVER_TRUST_ACCOUNT",
"RESERVED",
"RESERVED",
"DONT_EXPIRE_PASSWORD",
"MNS_LOGON_ACCOUNT",
"SMARTCARD_REQUIRED",
"TRUSTED_FOR_DELEGATION",
"NOT_DELEGATED",
"USE_DES_KEY_ONLY",
"DONT_REQ_PREAUTH",
"PASSWORD_EXPIRED",
"TRUSTED_TO_AUTH_FOR_DELEGATION",
"RESERVED",
"PARTIAL_SECRETS_ACCOUNT"
"RESERVED"
"RESERVED"
"RESERVED"
"RESERVED"
"RESERVED"
)
$Attributes = ""
1..($UACPropertyFlags.Length) | Where-Object {$UAC -bAnd [math]::Pow(2,$_)} | ForEach-Object {If ($Attributes.Length -EQ 0) {$Attributes = $UACPropertyFlags[$_]} Else {$Attributes = $Attributes + " | " + $UACPropertyFlags[$_]}}
Return $Attributes
}
******************  Bit Locker  ********************
manage-bde -status
****************** Install Active Directory on Windows 10 ******************
DISM /get-capabilities -online
Add-WindowsCapability -online -name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0
Add-WindowsCapability -online -name IIS-ManagementConsole

Search-AzGraph -Query 'where type =~ "Microsoft.Storage/storageAccounts"' |  where  name -like "iagdatad01ccc01"
****************  Az query  ************************
az vm list --query "[].{Name:name,Location:location,RG:resourceGroup}" --output table
Name             Location       RG
---------------  -------------  ------------------------------------
iagdatad01vm001  canadacentral  IAGDATAD01-CAC-RG-INFORMATICA-01
iagdtd1vm1Tst    canadacentral  IAGDATAD01-CAC-RG-INFORMATICA-01TEST
iagdtd1vm2Tst    canadacentral  IAGDATAD01-CAC-RG-INFORMATICA-01TEST
iagdtd1vm3       canadacentral  IAGDATAD01-CAC-RG-INFORMATICA-01TEST

az vm list --query "[?contains(name, 'iagdtd1vm1Tst')].{Name:name,Location:location,RG:resourceGroup}" --output table
Name           Location       RG
-------------  -------------  ------------------------------------
iagdtd1vm1Tst  canadacentral  IAGDATAD01-CAC-RG-INFORMATICA-01TEST

az network nic list --query "[?contains(name, 'iagdtd1vm2Tst-nic')].{IP:ipConfigurations[0].privateIpAddress}" --output table
IP
------------
10.103.34.39

dir HKLM:\SOFTWARE\ODBC\ODBC.INI -Recurse | %{ Get-ItemProperty -path ("REGISTRY::"  + $_.name) |select database, AUTHENTICATOR, warehouse, role}
*******************  Clean up modules **********************
$modulePaths = (dir env:psmodulepath).value.split(";")
foreach ( $modulePath in $modulePaths) {
dir $modulePath -Recurse -Depth 1 -Directory | where {$_.parent -ne $modulePath} | % {
$folder = $_ | select name, psparentpath, fullname, @{name = "version" ;e = {[system.version] $_.name}};
try {[system.version] $_.name  } catch {$noError = $false } }|% { if ($NoError -eq $false) { $folder }} | sort version | group PSParentPath | where {$_.count -gt 1} | % { $_.group.fullname[0] }}

dir "C:\Users\li2fw7\OneDrive - Industrial Alliance\Documents\PowerShell\Modules" -Recurse -Depth 1  -Directory | Group PSParentPath  |where {$_.count -gt 1  -and $_.count -lt 10} | %{ ($_.group | select fullname, @{ name= "Version" ;e = {[version] $_.fullname.split('\')[-1]}} | sort version )[0] |% { rd $_.fullname -force -Recurse -WhatIf}}
dir "C:\Users\LI2FW7\OneDrive - Industrial Alliance\Documents\PowerShell\Modules" -Recurse -Depth 1 -Directory  | where {$_.parent -notlike "C:\Users\LI2FW7\OneDrive - Industrial Alliance\Documents\PowerShell\Modules"} | Group PSParentPath  |where {$_.count -gt 1 } | %{ $_.group.fullname }
dir "C:\Program Files\WindowsPowerShell\Modules" -Recurse -Depth 1  -Directory | Group PSParentPath  |where {$_.count -gt 1  -and $_.count -lt 10} | %{ rd $_.group.fullname[0] -recurse -force }
********************  Git Certificate add *****************
git config --list --show-origin
openssl s_client -connect github.com:443 -showcerts
openssl s_client -connect Informaticainfra.file.core.windows.net:443 -showcerts
copy "C:\Program Files (x86)\Git\mingw32\ssl\certs\ca-bundle.crt" c:\Users\li2fw7\ca-bundle.crt
Your favorite text editor can open up the ca-bundle.crt file that you copied & the .cer files you exported from the browser. 
Copy the entire .cer text including the ----BEGIN CERTIFICATE--- and ----END CERTIFICATE--- to the bottom of your ca-bundle.crt file. 
Do this for all the .cer files you exported.
git config --global http.sslCAInfo C:/Users/Li2fw7/ca-bundle.crt
*****  To add certificates to AZ CLI  ***********************
C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\Lib\site-packages\certifi\cacert.pem
**************  Open file **********************
If ([System.IO.File]::Exists($Item)) {
  Try {
      $FileStream = [System.IO.File]::Open($Item,'Open','Write')

      $FileStream.Close()
      $FileStream.Dispose()

      $IsLocked = $False
  } Catch [System.UnauthorizedAccessException] {
      $IsLocked = 'AccessDenied'
  } Catch {
      $IsLocked = $True
  }
}
*************** Storage Account Network Rule *****************
update-AzStorageAccountNetworkRuleSet -AccountName $storageAccountName -ResourceGroupName $resourceGroupName -Bypass Logging,Metrics -DefaultAction Deny -IPRule (@{ IPAddressOrRange="52.139.17.111"; Action="allow"} ,@{ IPAddressOrRange="209.53.136.0/25"; Action="allow"}, @{ IPAddressOrRange="207.134.102.0/24"; Action="allow"} ) -VirtualNetworkRule (@{VirtualNetworkResourceId="/subscriptions/8b005915-4c8b-4a41-89af-6f44a22296e0/resourceGroups/iagdatad01-cac-rg-network-spoke-01/providers/Microsoft.Network/virtualNetworks/iagdatad01-cac-vnet-spoke-01/subnets/iagdatad01-cac-vnet-spoke-01-sub-vm-10.103.34.32-28"; Action="allow"})
***************  Azure Key vault secret **********************
$secret = Get-AzKeyVaultSecret -VaultName $keyVaultName -Name storelabtest-Sastoken
$ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secret.SecretValue)
[System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr)
********************  Install RSAT ************
# Install the RSAT AD PowerShell module.
    if ((Get-OSPlatform) -eq "Windows" -and (Get-WindowsInstallationType) -eq "Client") {
        $rsatADFeature = Get-OSFeature | `
            Where-Object { $_.Name -eq "Rsat.ActiveDirectory.DS-LDS.Tools" } | `
            Install-OSFeature
    }

************************  File reparse point symbolic link ************************
dir 'C:\Apps\' *.jar -File -Recurse| where { $_.attributes -like "*ReparsePoint*" } |% { get-item $_.fullname | select -ExpandProperty target |% {$full = $_; if (( new-object System.IO.FileInfo $full ).exists) {$full} else {write-warning  $full}}}
************************  To list a Hashtable as an array  ************************
$a = @{"hello" = "value1" ; "ok" = "Value2"}
foreach ( $test in $a.getenumerator()) {$test.value}
value1
Value2
********************  Pester  ****************
$pesterPreference = [pesterconfiguration]::default
$pesterPreference
Run          : Run configuration.
Filter       : Filter configuration
CodeCoverage : CodeCoverage configuration.
TestResult   : TestResult configuration.
Should       : Should configuration.
Debug        : Debug configuration for Pester. ? Use at your own risk!
Output       : Output configuration
TestDrive    : TestDrive configuration.
TestRegistry : TestRegistry configuration.
********************* Validate local admin password **************************
add-type -AssemblyName system.directoryservices.accountmanagement
$ds = New-Object system.directoryservices.accountmanagement.Principalcontext('machine', localhost)
$ds = New-Object system.directoryservices.accountmanagement.Principalcontext('machine', "localhost")
$ds
$ds.ValidateCredentials("administrator", "P@55w0rd!")
********************* register package reportUnit **************************
Register-PackageSource -Name NuGet.org -Location https://www.nuget.org/api/v2 -ProviderName NuGet
Find-Package reportunit | install-package
invoke-pester -OutputFormat NUnitXml -OutputFile c:\temp\nunit.xml
& "C:\Program Files\PackageManagement\NuGet\Packages\ReportUnit.1.2.1\tools\ReportUnit.exe" C:\temp\nunit.xml c:\temp\nunit.html
start chrome c:\temp\nunit.html
whoami /groups /fo csv | convertfrom-csv | sort "Nom du groupe" |  select "Nom du groupe"
*******************  Kubernetes *******************
az aks get-credentials --resource-group kube-rg  --name Kube
*****************  BFG erase secrets in GIT ******************
&"C:\Program Files\Java\jre1.8.0_321\bin\java.exe" -jar C:\users\li2fw7\Downloads\bfg-1.14.0.jar  --replace-text C:\temp\password.txt documentationYG.git
*****************  dsregcmd /status ***************

+----------------------------------------------------------------------+
| Device State                                                         |
+----------------------------------------------------------------------+

             AzureAdJoined : NO
          EnterpriseJoined : NO
              DomainJoined : NO
               Device Name : yves01

+----------------------------------------------------------------------+
| User State                                                           |
+----------------------------------------------------------------------+

                    NgcSet : NO
           WorkplaceJoined : NO
             WamDefaultSet : YES
       WamDefaultAuthority : consumers
              WamDefaultId : https://login.microsoft.com
            WamDefaultGUID : {D7F9888F-E3FC-49B0-9EA6-A85B5F392A4F} (MicrosoftAccount)
***************  Key vault *************
#Read a secret
$secret = Get-AzKeyVaultSecret -VaultName "SavillVaultRBAC" -Name "Secret1"
$ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secret.SecretValue)
try {
   $secretValueText = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr)
} finally {
   [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ssPtr)
}
Write-Output $secretValueText
*************  Connect to azure as Virtual machine Managed Identity ***********
connect-azaccount -identity
$storcontext = New-Azstoragecontext -StorageAccountName "awefaewf" -UseConnectedAccount 
Get-AzStorageBlobContent -Container "images" -Blob "yves.jpg" -Destination "c:\scrap\yves.jpg" -Context $storcontext

$response = Invoke-WebRequest -Uri 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3q%2f%2fvault.azure.net' -Method Get -Headers @{Metadata="true"}
$content = $response.content | convertfrom-json
$token= $content.access_token
(Invoke-WebRequest -Uri https://savkeyvault.azure.net/secrets/testsecret?api-version=2016-10-01 -Method Get -Headers @{Authorization="Bearer $token" }).content

********************* Check if name for key vault is available *********************
az login
$body = '{"name":"iagbntest06-cac-kv-MTR1","type":"Microsoft.KeyVault/vaults"}' | ConvertTo-Json
az rest --method post --uri 'https://management.azure.com/subscriptions/2630bb99-9cfd-451c-b8e7-e87e177549e9/providers/Microsoft.KeyVault/checkNameAvailability?api-version=2019-09-01' --headers 'Content-Type=application/json' --body $body
*********************  Bicep read Outputs  ********************
az login
az account set --name iag-burnum-lab-01
$out = az deployment group show -g test-rg -n main | convertfrom-json | foreach properties | foreach outputs
$out
********************  Check availability of a key vault name *********************
Invoke-AzRestMethod -Method POST -Uri 'https://management.azure.com/subscriptions/2630bb99-9cfd-451c-b8e7-e87e177549e9/providers/Microsoft.KeyVault/checkNameAvailability?api-version=2019-09-01' -Payload '{"name": "iagbntest06-cac-kv-MTR1","type": "Microsoft.KeyVault/vaults"}'
***********************   Remediation script  ***********************
You can check that in the following log: This one is located in: C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntuneManagementExtension.log
Ordinateur\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\IntuneManagementExtension\SideCarPolicies\Scripts\Reports\00000000-0000-0000-0000-000000000000\c36a43b5-15a7-49a5-af49-0a7e26401434_7\Result
*******************  validateSet *********************
[string]  [ValidateSet("hello", "world")] $string = "Hi"
MetadataError: The variable cannot be validated because the value Hi is not a valid value for the string variable.
*****************  Connect to MGGraph **************
Connect-MgGraph -ClientID 5869fafa-4a51-409b-9406-29663bcffb0f -TenantId $((get-azcontext).tenant.id) -CertificateName "CN=iag-infr-burnum-lab-mtr-01"
********************   Git reset branch to copy of master  ******************************
git checkout feature/burbn_exchange
git reset --hard master
// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

******************  Export outputs dans arm templates *******************
            - task: PowerShell@2
              displayName: "Set VirtualNetwork variables"
              name: "VnetVariable"
              inputs:
                targetType: "inline"
                script: |
                  $output =  $env:Virtualnetwork | convertfrom-json                  
                  write-host "This is the value: " $output.id.value 
                  $id = $output.id.value 
                  Write-Output "##vso[task.setvariable variable=id;]$id"
              enabled: false

            - task: PowerShell@2
              displayName: "Set VirtualNetwork results"
              name: "Vnetresults"
              inputs:
                targetType: "inline"
                script: |
                  write-Output "This is the value: "$Env:id
              enabled: false
***********************  String to convert to file ************
# Create Input Data 
$enc = [system.Text.Encoding]::UTF8
$string1 = "This is a string to hash" 
$data1 = $enc.GetBytes($string1) 

# Create a New SHA1 Crypto Provider 
$sha = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider 

# Now hash and display results 
$result1 = $sha.ComputeHash($data1)
[oBase64String($result1)
******************  Set argument completer *********************
$scriptBlock = {
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameters)

    (Get-TimeZone -ListAvailable).Id | Where-Object {
        $_ -like "$wordToComplete*"
    } | ForEach-Object {
          "'$_'"
    }
}
Register-ArgumentCompleter -CommandName Set-TimeZone -ParameterName Id -ScriptBlock $scriptBlock
***************  Double-hop problem  ******************
"Copy Drivers to server"
Enable-WSManCredSSP -Role Client -DelegateComputer $Server -Force
invoke-command -ComputerName $server -ScriptBlock {Enable-WSManCredSSP -Role Server –Force}
Invoke-Command -Session $session -ScriptBlock {robocopy \\kruger.com\sccm$\Sources\Software_Library\KRUGER\SOFTWARES\Drivers c:\drivers /s /mt:16 }
****************  Run HP web Jetadmin  *********************
rundll32 dfshim.dll, ShOpenVerbApplication http://127.0.0.1:8000/wja/wja.application?InternalErrorDetails=true
********************  query Clusters in AD ***********************
setspn -Q MSClusterVirtualServer/HOSVSQLTSTAG
Checking domain DC=kruger,DC=com
CN=HOSVSQLTSTAG,OU=Servers,OU=Head Office,DC=kruger,DC=com
        MSServerCluster/HOSVSQLTSTAG.ho.kruger.com
        MSServerClusterMgmtAPI/HOSVSQLTSTAG.ho.kruger.com
        MSClusterVirtualServer/HOSVSQLTSTAG.ho.kruger.com
        HOST/HOSVSQLTSTAG.ho.kruger.com
        MSServerCluster/HOSVSQLTSTAG
        MSServerClusterMgmtAPI/HOSVSQLTSTAG
        MSClusterVirtualServer/HOSVSQLTSTAG
        HOST/HOSVSQLTSTAG
get-adobject -filter {name -like "hosvsqltstag*"} -properties servicePrincipalName
DistinguishedName    : CN=HOSVSQLTSTAG,OU=Servers,OU=Head Office,DC=kruger,DC=com
Name                 : HOSVSQLTSTAG
ObjectClass          : computer
ObjectGUID           : 413be09d-312b-4708-9e01-824d7862b53f
servicePrincipalName : {MSServerCluster/HOSVSQLTSTAG.ho.kruger.com, MSServerClusterMgmtAPI/HOSVSQLTSTAG.ho.kruger.com,
                       MSClusterVirtualServer/HOSVSQLTSTAG.ho.kruger.com, HOST/HOSVSQLTSTAG.ho.kruger.com…}
*********************  Add description to groups for GPO **********************
$gpo.report.gpo |foreach-object {$name = $_.name ; $_.SecurityDescriptor |% { $_.permissions.TrusteePermissions |% { if ($_.standard.GPOGroupedAccessEnum -eq "Apply Group Policy" -and $_.trustee.sid."#text" -like "S-1-5-21-*") {$_ | select @{name="Gpo"; e= {$name}}, @{name="Sid"; e= {$_.trustee.sid."#text" }},@{name = "Allow" ;e = {$_.type.PermissionType}}} }} |% {$name = $_.gpo; $Sid = $_.Sid ; $allow= $_.allow; Get-ADObject -Filter {objectSid -eq $Sid} -Properties Description |% { if ( $null -eq $_.description -and $_.objectclass -eq "group") { Set-ADGroup -Identity $_.distinguishedname -Description "$allow this GPO to be applied: $name" -Confirm } }}}
********************  TreeSize  *************************
Get-ChildItem "\\grsvfp01\groups\Serveur Richelieu (R)" -Directory | ForEach-Object { 
    Start-Job -Name $_.name -ArgumentList  $_.fullname -ScriptBlock {
        param($fullname) 
        $objFSO = New-Object -ComObject "Scripting.FileSystemObject" 
        $objFSO.GetFolder($fullname) | Select-Object name, path , size
    }
}
*******************  Find active directory account for room mailboxes on-prem and Online  *****************
get-mailbox –ResultSize Unlimited –RecipientTypeDetails RoomMailbox | %{$p = $_.primarysmtpaddress; get-aduser -Filter {emailaddress -eq $p}}
Enter-PSSession -ComputerName hosvekhoppd -SessionOption (New-PssessionOption -IncludePortInSPN)
***************  SCCM patches updates ****************
cd \Program Files\Windows Defender
.\MpCmdRun.exe -removedefinitions -dynamicsignatures
.\MpCmdRun.exe -SignatureUpdate
#Get all of the failed updates on the system
get-ciminstance -query "SELECT * FROM CCM_SoftwareUpdate" -namespace "ROOT\ccm\ClientSDK"
*************  AD GUIDs for Get-acl ************
To resolve this GUID to a name we need to see where these GUIDs are stored.
To get the list of ObjectType names, run the following PowerShell code

$ObjectTypeGUID = @{}

$GetADObjectParameter=@{
    SearchBase=(Get-ADRootDSE).SchemaNamingContext
    LDAPFilter='(SchemaIDGUID=*)'
    Properties=@("Name", "SchemaIDGUID")
}

$SchGUID=Get-ADObject @GetADObjectParameter
    Foreach ($SchemaItem in $SchGUID){
    $ObjectTypeGUID.Add([GUID]$SchemaItem.SchemaIDGUID,$SchemaItem.Name)
}

$ADObjExtPar=@{
    SearchBase="CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)"
    LDAPFilter='(ObjectClass=ControlAccessRight)'
    Properties=@("Name", "RightsGUID")
}

$SchExtGUID=Get-ADObject @ADObjExtPar
    ForEach($SchExtItem in $SchExtGUID){
    $ObjectTypeGUID.Add([GUID]$SchExtItem.RightsGUID,$SchExtItem.Name)
}

$ObjectTypeGUID | Format-Table -AutoSize

